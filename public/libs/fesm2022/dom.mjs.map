{"version":3,"file":"dom.mjs","sources":["../../../libs/src/lib/dom/components/table/table-action-cell/table-cell-action.directive.ts","../../../libs/src/lib/dom/components/table/table-form-cell/table-cell-form.directive.ts","../../../libs/src/lib/dom/components/table/table-action-cell/table-action-cell.component.ts","../../../libs/src/lib/dom/components/table/table-action-cell/table-action-cell.component.html","../../../libs/src/lib/dom/components/table/table-form-cell/table-cell-form.component.ts","../../../libs/src/lib/dom/components/table/table-form-cell/table-cell-form.component.html","../../../libs/src/lib/dom/components/table/models/gridRows.ts","../../../libs/src/lib/dom/components/table/table.component.ts","../../../libs/src/lib/dom/components/table/table.component.html","../../../libs/src/dom.ts"],"sourcesContent":["import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[domTableActionCell]',\r\n  standalone: true,\r\n})\r\nexport class ActionCellDirective {\r\n  constructor(public template: TemplateRef<unknown>) {}\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[domTableFormCell]',\r\n  standalone: true,\r\n})\r\nexport class FormCellDirective {\r\n  constructor(public template: TemplateRef<unknown>) {}\r\n}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  OnInit,\r\n  Signal,\r\n  computed,\r\n  input,\r\n  output\r\n} from '@angular/core';\r\n\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatButtonModule, MatIconButton } from '@angular/material/button';\r\nimport { MatIcon } from '@angular/material/icon';\r\nimport { MatTooltip } from '@angular/material/tooltip';\r\n\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\n\r\n// export interface ButtonActionState {\r\n//   editState?: ActionState;\r\n//   deleteState?: ActionState;\r\n// }\r\n\r\n@Component({\r\n  selector: 'dom-table-actions-cell',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatIconButton,\r\n    MatTooltip,\r\n    MatIcon,\r\n    MatSlideToggleModule,\r\n  ],\r\n  templateUrl: './table-action-cell.component.html',\r\n  styleUrls: ['./table-action-cell.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TableActionCellComponent implements OnInit {\r\n  icon = input<string>('');\r\n  tooltip = input<string>('');\r\n  text = input<string>('');\r\n\r\n  isDisabled = input<boolean>(false);\r\n\r\n  isIconButton!: Signal<boolean>;\r\n\r\n  actionClicked = output<void>();\r\n\r\n  ngOnInit(): void {\r\n    this.isIconButton = computed(() => !!this.icon());\r\n  }\r\n\r\n  onActionButtonClick(): void {\r\n    this.actionClicked.emit();\r\n  }\r\n}\r\n","@if (isIconButton()) {\r\n\r\n<button\r\n  mat-icon-button\r\n  type=\"button\"\r\n  (click)=\"onActionButtonClick()\"\r\n  [disabled]=\"isDisabled()\"\r\n  [matTooltip]=\"tooltip()\"\r\n>\r\n  <mat-icon [fontIcon]=\"icon()\"></mat-icon>\r\n</button>\r\n\r\n} @else {\r\n  <button\r\n    mat-flat-button\r\n    color=\"\"\r\n    type=\"button\"\r\n    (click)=\"onActionButtonClick()\"\r\n    [disabled]=\"isDisabled()\"\r\n    [matTooltip]=\"tooltip()\"\r\n  >\r\n    {{ text() }}\r\n  </button>\r\n}\r\n<!-- slots buttons -->\r\n<!-- <ng-container>\r\n    <ng-template\r\n      *ngTemplateOutlet=\"\r\n        endSlot;\r\n        context: {\r\n          $implicit: rowState\r\n        }\r\n      \"\r\n    ></ng-template>\r\n  </ng-container> -->\r\n","import { ChangeDetectionStrategy, Component, input } from '@angular/core';\r\n// import { QuestionGroupModel } from '../../../../form/models/question-group.model';\r\n// import { QuestionBase } from '../../../../form/models/question.model';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\n\r\n@Component({\r\n  selector: 'dom-table-form-cell',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    MatSelectModule,\r\n    MatFormFieldModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n  ],\r\n  templateUrl: './table-cell-form.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TableFormCellComponent {\r\n  // public readonly group = input.required<FormGroup>();\r\n  // public readonly columnDef = input.required<string>();\r\n  // public readonly type = input.required<string>();\r\n}\r\n","<div>form cell</div>\r\n","import { GridKeyValue } from './gridColDef';\n\nexport type GridValidRowModel = { [key: string | symbol]: unknown };\n\nexport type GridRowsProp<R extends GridValidRowModel = GridValidRowModel> =\n  Readonly<GridRowModel<R>[]>;\n\n/**\n * The key value object representing the data of a row.\n */\nexport type GridRowModel<R extends GridValidRowModel = GridValidRowModel> = R;\n\nexport type GridUpdateAction = 'delete';\n\nexport interface GridRowModelUpdate extends GridRowModel {\n  _action?: GridUpdateAction;\n}\n\n/**\n * The grid rows total height and row positions.\n */\nexport interface GridRowsMeta {\n  /**\n   * The sum of all grid rows.\n   */\n  totalHeight: number;\n  /**\n   * The grid rows positions.\n   */\n  positions: number[];\n}\n\nexport interface GridTreeBasicNode {\n  /**\n   * The uniq id of this node.\n   */\n  id: GridRowId;\n  /**\n   * Depth of this node in the tree.\n   */\n  depth: number;\n}\n\nexport interface GridLeafNode extends GridTreeBasicNode {\n  type: 'leaf';\n  /**\n   * The id of the group containing this node.\n   */\n  parent: GridRowId;\n  /**\n   * The key used to group the children of this row.\n   */\n  groupingKey: GridKeyValue | null;\n}\n\nexport interface GridBasicGroupNode extends GridTreeBasicNode {\n  type: 'group';\n  /**\n   * The key used to group the children of this row.\n   */\n  groupingKey: GridKeyValue | null;\n  /**\n   * The field used to group the children of this row.\n   * Is `null` if no field has been used to group the children of this row.\n   */\n  groupingField: string | null;\n  /**\n   * The id of the body children nodes.\n   * Only contains the children of type \"group\" and \"leaf\".\n   */\n  children: GridRowId[];\n  /**\n   * The id of the footer child node.\n   */\n  footerId?: GridRowId | null;\n  /**\n   * The id of the children nodes, grouped by grouping field and grouping key.\n   * Only contains the children of type \"group\" and \"leaf\".\n   * Empty for flat tree.\n   */\n  childrenFromPath: GridChildrenFromPathLookup;\n  /**\n   * If `true`, the children of this group are not visible.\n   * @default false\n   */\n  childrenExpanded?: boolean;\n  /**\n   * The id of the group containing this node (null for the root group).\n   */\n  parent: GridRowId | null;\n  /**\n   * If `true`, this row is pinned.\n   * @default false\n   */\n  isPinned?: boolean;\n}\n\nexport interface GridAutoGeneratedGroupNode extends GridBasicGroupNode {\n  /**\n   * If `true`, this node has been automatically generated by the grid.\n   * In the row grouping, all groups are auto-generated\n   * In the tree data, some groups can be passed in the rows\n   */\n  isAutoGenerated: true;\n}\n\nexport interface GridDataGroupNode extends GridBasicGroupNode {\n  /**\n   * If `true`, this node has been automatically generated by the grid.\n   * In the row grouping, all groups are auto-generated\n   * In the tree data, some groups can be passed in the rows\n   */\n  isAutoGenerated: false;\n}\n\nexport type GridGroupNode = GridDataGroupNode | GridAutoGeneratedGroupNode;\n\nexport type GridChildrenFromPathLookup = {\n  [groupingField: string]: {\n    [groupingKey: string]: GridRowId;\n  };\n};\n\nexport interface GridFooterNode extends GridTreeBasicNode {\n  type: 'footer';\n  /**\n   * The id of the group containing this node.\n   */\n  parent: GridRowId;\n}\n\nexport interface GridSkeletonRowNode extends GridTreeBasicNode {\n  type: 'skeletonRow';\n  /**\n   * The id of the group containing this node.\n   * Is always equal to `GRID_ROOT_GROUP_ID`.\n   */\n  parent: GridRowId;\n}\n\ninterface GridBasicPinnedRowNode extends GridTreeBasicNode {\n  type: 'pinnedRow';\n  /**\n   * The id of the group containing this node.\n   * Is always equal to `GRID_ROOT_GROUP_ID`.\n   */\n  parent: GridRowId;\n}\n\nexport interface GridDataPinnedRowNode extends GridBasicPinnedRowNode {\n  /**\n   * If `true`, this node has been automatically generated by the grid.\n   */\n  isAutoGenerated: true;\n}\n\nexport interface GridAutoGeneratedPinnedRowNode extends GridBasicPinnedRowNode {\n  /**\n   * If `true`, this node has been automatically generated by the grid.\n   */\n  isAutoGenerated: false;\n}\n\nexport type GridPinnedRowNode =\n  | GridDataPinnedRowNode\n  | GridAutoGeneratedPinnedRowNode;\n\nexport type GridTreeNode =\n  | GridLeafNode\n  | GridGroupNode\n  | GridFooterNode\n  | GridPinnedRowNode\n  | GridSkeletonRowNode;\n\nexport type GridTreeNodeWithRender =\n  | GridLeafNode\n  | GridGroupNode\n  | GridFooterNode\n  | GridPinnedRowNode;\n\nexport type GridRowTreeConfig = Record<GridRowId, GridTreeNode>;\n\n/**\n * The type of Id supported by the grid.\n */\nexport type GridRowId = string | number;\n\nexport interface GridRowEntry<R extends GridValidRowModel = GridValidRowModel> {\n  /**\n   * The row id.\n   */\n  id: GridRowId;\n  /**\n   * The row model.\n   */\n  model: R;\n}\n\n/**\n * The function to retrieve the id of a [[GridRowModel]].\n */\nexport type GridRowIdGetter<R extends GridValidRowModel = GridValidRowModel> = (\n  row: R\n) => GridRowId;\n\nexport enum GridRowModes {\n  Edit = 'edit',\n  View = 'view',\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Signal,\n  WritableSignal,\n  computed,\n  contentChild,\n  input,\n  signal,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { MatIconButton } from '@angular/material/button';\nimport { MatIcon } from '@angular/material/icon';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatTableModule } from '@angular/material/table';\nimport { GridBaseColDef } from './models/gridColDef';\nimport { GridRowModes } from './models/gridRows';\nimport { ActionCellDirective } from './table-action-cell/table-cell-action.directive';\nimport { FormCellDirective } from './table-form-cell/table-cell-form.directive';\n\n@Component({\n  selector: 'dom-table',\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatIcon,\n    MatIconButton,\n  ],\n  templateUrl: './table.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TableComponent<T> {\n  public actionColumn = contentChild(ActionCellDirective);\n\n  public formColumn = contentChild(FormCellDirective);\n\n  idKey = input<string>('id');\n\n  dataSource = input.required<T[]>();\n\n  columns = input.required<GridBaseColDef[]>();\n\n  editRow = input<boolean>(false);\n\n  rowModesModel = input<{ [key: string]: GridRowModes }>({});\n\n  rowFormGroupModel: Signal<{ [key: string]: FormGroup }> = computed(() => {\n    return Object.keys(this.rowModesModel()).reduce((acc, key) => {\n      if (this.rowModesModel()[key] === GridRowModes.Edit) {\n        acc[key] = new FormGroup({});\n      }\n      return acc;\n    }, {} as { [key: string]: FormGroup });\n  });\n\n  public readonly tableColumns = this.computeTableColumns();\n  public readonly displayedColumns = this.computeDisplayColumns();\n\n  public readonly showEdit: WritableSignal<{ [key: string]: boolean }> = signal(\n    {}\n  );\n\n  computeTableColumns() {\n    return computed(() => {\n      const columns = this.columns();\n\n      const withEditColumn = this.editRow()\n        ? [\n            ...columns,\n            {\n              field: 'actions',\n              type: 'actions',\n            } as GridBaseColDef,\n          ]\n        : columns;\n\n      return withEditColumn;\n    });\n  }\n\n  computeDisplayColumns() {\n    return computed(() => this.tableColumns().map((column) => column.field));\n  }\n}\n","<table mat-table [dataSource]=\"dataSource()\" class=\"mat-elevation-z8\">\n  <!--- Note that these columns can be defined in any order.\n              The actual rendered columns are set as a property on the row definition\" -->\n\n  @for (column of tableColumns(); track $index) {\n\n  <ng-container [matColumnDef]=\"column.field\">\n    <th mat-header-cell *matHeaderCellDef>\n      {{ column.headerName | titlecase }}\n    </th>\n\n    @if(column.type !== 'actions') {\n\n    <td mat-cell *matCellDef=\"let element\">\n      @if( column.editable && rowModesModel()![element[idKey()]] === 'edit') {\n\n      <ng-container\n        *ngTemplateOutlet=\"formCell; context: { $implicit: element }\"\n      ></ng-container>\n\n      } @else { {{ element[column.field] }}}\n    </td>\n\n    } @else {\n    <td mat-cell *matCellDef=\"let element\">\n      <ng-container\n        *ngTemplateOutlet=\"actionCell; context: { $implicit: element }\"\n      ></ng-container>\n    </td>\n    }\n  </ng-container>\n\n  }\n\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns()\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns()\"></tr>\n</table>\n\n<ng-template #formCell let-element>\n  @if(formColumn()) {\n  <ng-container\n    *ngTemplateOutlet=\"formColumn()!.template; context: { $implicit: element }\"\n  ></ng-container>\n  }\n</ng-template>\n\n<ng-template #actionCell let-element>\n  @if(actionColumn()){\n\n  <ng-container\n    *ngTemplateOutlet=\"\n      actionColumn()!.template;\n      context: { $implicit: element }\n    \"\n  ></ng-container>\n  }\n</ng-template>\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["i1"],"mappings":"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"}