{"version":3,"file":"dom.mjs","sources":["../../../libs/src/lib/dom/components/form/constants.ts","../../../libs/src/lib/dom/components/form/form-error.service.ts","../../../libs/src/lib/dom/components/form/form-input/form-input.component.ts","../../../libs/src/lib/dom/components/form/form-input/form-input.component.html","../../../libs/src/lib/dom/components/form/helper.ts","../../../libs/src/lib/dom/components/form/search-input/search-input.component.ts","../../../libs/src/lib/dom/components/form/search-input/search-input.component.html","../../../libs/src/lib/dom/directives/optionContent.directive.ts","../../../libs/src/lib/dom/directives/parallax.directive.ts","../../../libs/src/lib/dom/components/form/autocomplete/autocomplete.component.ts","../../../libs/src/lib/dom/components/form/autocomplete/autocomplete.component.html","../../../libs/src/lib/dom/components/form/types.ts","../../../libs/src/lib/dom/components/card-button/card-button.component.ts","../../../libs/src/lib/dom/components/divider-header/divider-header.component.ts","../../../libs/src/lib/dom/components/flip-container/flip-container.service.ts","../../../libs/src/lib/dom/components/flip-container/flip-container.component.ts","../../../libs/src/lib/dom/components/floating-button/floating-button.component.ts","../../../libs/src/lib/dom/components/info-card/info-card.component.ts","../../../libs/src/lib/dom/components/table/table-action-cell/table-cell-action.directive.ts","../../../libs/src/lib/dom/components/table/table-form-cell/table-cell-form.directive.ts","../../../libs/src/lib/dom/components/table/table-action-cell/table-action-cell.component.ts","../../../libs/src/lib/dom/components/table/table-action-cell/table-action-cell.component.html","../../../libs/src/lib/dom/components/table/table-form-cell/table-cell-form.component.ts","../../../libs/src/lib/dom/components/table/table-form-cell/table-cell-form.component.html","../../../libs/src/lib/dom/components/table/models/gridRows.ts","../../../libs/src/lib/dom/components/table/table.component.ts","../../../libs/src/lib/dom/components/table/table.component.html","../../../libs/src/lib/dom/helpers/entities/logic.ts","../../../libs/src/lib/dom/helpers/script.helpers.ts","../../../libs/src/index.ts","../../../libs/src/dom.ts"],"sourcesContent":["import { ValidationErrors } from \"@angular/forms\";\n\nexport const errorMessageMap: ValidationErrors = {\n    required: 'required',\n    pattern: 'invalid pattern',\n    email: 'invalid email format',\n  };\n  ","import {\n  Injectable,\n  Injector,\n  Signal,\n  WritableSignal,\n  effect,\n  runInInjectionContext,\n  signal,\n} from '@angular/core';\nimport { FormControl, FormGroup, ValidationErrors } from '@angular/forms';\nimport { rxMethod } from '@ngrx/signals/rxjs-interop';\nimport { Observable, pipe } from 'rxjs';\nimport { map, startWith, tap } from 'rxjs/operators';\nimport { errorMessageMap } from './constants';\nimport { FormServerError } from './types';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FormErrorService {\n  constructor(private injector: Injector) {}\n\n  errors: WritableSignal<ValidationErrors> = signal({});\n\n  handleServerErrorEffect(\n    serverError: Signal<FormServerError | undefined>,\n    form: FormGroup\n  ): void {\n    effect(\n      () => {\n        const error = serverError();\n\n        if (error) {\n          this.setFormError(form, error);\n        }\n      },\n      { allowSignalWrites: true, injector: this.injector }\n    );\n  }\n\n  private setFormError(group: FormGroup, error: FormServerError): void {\n    if (group !== null && error !== null) {\n      const control = group.get(error.control as string);\n\n      if (control != null) {\n        control.setErrors({ serverError: error.message });\n      }\n    }\n  }\n\n  createErrorMessageEmitter(\n    messages: ValidationErrors | undefined,\n    updater: (value: string) => void\n  ): (source$: Observable<ValidationErrors | null>) => void {\n    return runInInjectionContext(this.injector, () => {\n      return rxMethod<ValidationErrors>(\n        pipe(\n          map((errors: ValidationErrors) =>\n            this.getInputErrorMessage(errors, messages)\n          ),\n          tap((value: string) => updater(value))\n        )\n      );\n    });\n  }\n\n  handleError(\n    control: FormControl,\n    emitter: (source$: Observable<ValidationErrors | null>) => void\n  ) {\n    const source$ = control.statusChanges.pipe(\n      startWith(control.status),\n      map(() => control.errors)\n    );\n\n    emitter(source$);\n  }\n\n  private getInputErrorMessage(\n    errors: ValidationErrors,\n    messages: ValidationErrors | undefined\n  ): string {\n    if (errors) {\n      const errorKeys: string[] = Object.keys(errors);\n\n      const errorMap = {\n        ...errors,\n        ...errorMessageMap,\n        ...messages,\n      };\n\n      for (const error of errorKeys) {\n        return errorMap[error];\n      }\n    }\n\n    return '';\n  }\n\n  handleErrorMap(group: FormGroup, messages: ValidationErrors) {\n    group.statusChanges.pipe(\n      startWith(group.status),\n      map(() => {\n        const formKeys = Object.keys(group.controls);\n        for (const key of formKeys) {\n          const controlErrors = group.controls[key].errors;\n\n          this.errors.update((value) => ({\n            ...value,\n            ...messages,\n            [key]: { ...controlErrors },\n          }));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  OnInit,\n  Output,\n  Signal,\n  WritableSignal,\n  computed,\n  inject,\n  input,\n  signal\n} from '@angular/core';\nimport {\n  AbstractControl,\n  FormControl,\n  ReactiveFormsModule,\n  ValidationErrors,\n} from '@angular/forms';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { FormErrorService } from '../form-error.service';\n\n@Component({\n  selector: 'dom-form-input',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    MatFormFieldModule,\n    MatInputModule,\n  ],\n  templateUrl: './form-input.component.html',\n  styleUrls: ['./form-input.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FormInputComponent implements OnInit {\n\n  #formError = inject(FormErrorService);\n\n  control = input.required<AbstractControl<unknown, unknown> | null>();\n  key = input.required<string>();\n  type = input<string>();\n  label = input<string>();\n  hint = input<string>();\n  messagesMap = input<ValidationErrors>();\n\n  formControl!: Signal<FormControl<unknown>>;\n\n  message: WritableSignal<string> = signal('');\n\n  @Output() blurChanged = new EventEmitter<FormControl>();\n\n  ngOnInit(): void {\n    this.formControl = computed(() => this.control() as FormControl);\n\n    const errorEmitter = this.#formError.createErrorMessageEmitter(\n      this.messagesMap(),\n      (value) => this.message.set(value)\n    );\n\n    this.#formError.handleError(this.formControl(), errorEmitter);\n  }\n\n  onBlur() {\n    this.blurChanged.emit(this.formControl());\n  }\n}\n","<mat-form-field class=\"full-width\">\n  <mat-label>{{ label() }}</mat-label>\n  <input\n    #input\n    matInput\n    autocomplete=\"off\"\n    [type]=\"type() || 'text'\"\n    [formControl]=\"formControl()\"\n    [name]=\"key()\"\n    (blur)=\"onBlur()\"\n  />\n\n  @if (hint()) {\n  <mat-hint> {{ 'Please enter your ' + hint() }}</mat-hint>\n\n  } @if (!!message()) {\n  <mat-error>{{ message() }}</mat-error>\n  }\n</mat-form-field>\n","import {\n  Injector,\n  Signal,\n  WritableSignal,\n  effect,\n  runInInjectionContext,\n  signal,\n} from '@angular/core';\nimport { FormControl, FormGroup, ValidationErrors } from '@angular/forms';\nimport { rxMethod } from '@ngrx/signals/rxjs-interop';\nimport {\n  Observable,\n  debounceTime,\n  distinctUntilChanged,\n  map,\n  pipe,\n  startWith,\n  tap,\n} from 'rxjs';\nimport { FormServerError } from './types';\nimport { errorMessageMap } from './constants';\n\nexport function getFormKeys<T>(obj: FormGroup): WritableSignal<(keyof T)[]> {\n  return signal(Object.keys(obj.controls) as (keyof T)[]);\n}\n\nexport function createValueChangesEmitter(\n  valueChanged: (value: string) => void\n) {\n  return rxMethod<string>(\n    pipe(\n      debounceTime(300),\n      distinctUntilChanged(),\n      tap((value) => valueChanged(value))\n    )\n  );\n}\n\nfunction setFormError(group: FormGroup, error: FormServerError): void {\n  if (group !== null && error !== null) {\n    const control = group.get(error.control as string);\n\n    if (control != null) {\n      control.setErrors({ serverError: error.message });\n    }\n  }\n}\n\n/**\n * Applies an effect to handle server errors by updating a form's errors.\n *\n * @param injector An Angular Injector instance.\n * @param serverError A Signal representing the server error.\n * @param form The FormGroup instance to which the server error will be applied.\n * @returns void\n *\n * @remarks\n * This function sets up an effect to handle server errors by updating the errors\n * of a FormGroup instance. When a server error is emitted via the provided\n * `serverError` signal, this effect will update the form's errors\n * accordingly.\n *\n * Example usage:\n * ```typescript\n * handleServerErrorEffect(injector, serverErrorSignal, myFormGroup);\n * ```\n */\nexport function handleServerErrorEffect(\n  injector: Injector,\n  serverError: Signal<FormServerError | undefined>,\n  form: FormGroup\n): void {\n  effect(\n    () => {\n      const error = serverError();\n\n      if (error) {\n        setFormError(form, error);\n      }\n    },\n    { allowSignalWrites: true, injector }\n  );\n}\n\nexport function getInputErrorMessage(\n  errors: ValidationErrors,\n  messages: ValidationErrors | undefined\n): string {\n  if (errors) {\n    const errorKeys: string[] = Object.keys(errors);\n\n    const errorMap = {\n      ...errors,\n      ...errorMessageMap,\n      ...messages,\n    };\n\n    for (const error of errorKeys) {\n      return errorMap[error];\n    }\n  }\n\n  return '';\n}\n\nexport function createErrorMessageEmitter(\n  injector: Injector,\n  messages: ValidationErrors | undefined,\n  updater: (value: string) => void\n): (source$: Observable<ValidationErrors | null>) => void {\n  return runInInjectionContext(injector, () => {\n    return rxMethod<ValidationErrors>(\n      pipe(\n        map((errors: ValidationErrors) =>\n          getInputErrorMessage(errors, messages)\n        ),\n        tap((value: string) => updater(value))\n      )\n    );\n  });\n}\n\nexport function handleError(\n  control: FormControl,\n  emitter: (source$: Observable<ValidationErrors | null>) => void\n) {\n  const source$ = control.statusChanges.pipe(\n    startWith(control.status),\n    map(() => control.errors)\n  );\n\n  emitter(source$);\n}\n\nexport function withError() {\n  return { handleError, createErrorMessageEmitter };\n}\n","import { CommonModule } from '@angular/common';\nimport { Component, EventEmitter, Output, effect, input } from '@angular/core';\nimport { FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { createValueChangesEmitter } from '../helper';\n\nexport interface SearchMediaResultsData {\n  totalMediaResults: number;\n}\n\n@Component({\n  selector: 'dom-search-input',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatInputModule,\n    MatFormFieldModule,\n  ],\n  templateUrl: './search-input.component.html',\n  styleUrls: ['./search-input.component.scss'],\n})\nexport class SearchInputComponent {\n  control = input.required<FormControl<string>>();\n\n  label = input<string>();\n  initialValue = input<string>();\n\n  @Output() valueChanged = new EventEmitter<string>();\n\n  private handleValueChanges = createValueChangesEmitter((value) =>\n    this.valueChanged.emit(value)\n  );\n\n  constructor() {\n    effect(\n      () => {\n        if (this.control()) {\n          this.handleValueChanges(this.control().valueChanges);\n        }\n      },\n      { allowSignalWrites: true }\n    );\n  }\n}\n","<mat-form-field class=\"dom-search-input\">\n  <label for=\"\">{{ label() }}</label>\n  <input\n    matInput\n    type=\"text\"\n    [formControl]=\"control()\"\n  />\n</mat-form-field>\n","import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({\n  selector: '[domOptionContent]',\n  standalone: true,\n})\nexport class OptionContentDirective {\n  constructor(public template: TemplateRef<unknown>) {}\n}\n","import { Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[domParallax]',\n  standalone: true,\n})\nexport class ParallaxDirective {\n\n  constructor(private el: ElementRef, private renderer: Renderer2) { }\n\n  @HostListener(\"scroll\", [\"$event\"])\n  onScroll(event: Event) {\n    const scrollPosition = (event.target as HTMLElement).scrollTop;\n    this.renderer.setStyle(\n      this.el.nativeElement,\n      'backgroundPositionY',\n      `${scrollPosition * 0.5}px`\n    );\n  }\n}","import { NgFor, NgIf, NgTemplateOutlet } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  EventEmitter,\n  Input,\n  Output,\n  TemplateRef,\n  effect,\n  input,\n} from '@angular/core';\nimport { FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  MatAutocompleteModule,\n  MatAutocompleteSelectedEvent,\n} from '@angular/material/autocomplete';\nimport { MatOption } from '@angular/material/core';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { rxMethod } from '@ngrx/signals/rxjs-interop';\nimport {\n  Subject,\n  debounceTime,\n  distinctUntilChanged,\n  map,\n  pipe,\n  tap,\n} from 'rxjs';\n// eslint-disable-next-line @nx/enforce-module-boundaries\nimport { OptionContentDirective } from '../../../directives';\n\n@Component({\n  selector: 'dom-autocomplete',\n  standalone: true,\n  imports: [\n    NgFor,\n    NgIf,\n    NgTemplateOutlet,\n    FormsModule,\n    ReactiveFormsModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatAutocompleteModule,\n    MatOption,\n    OptionContentDirective,\n  ],\n  templateUrl: './autocomplete.component.html',\n  styleUrl: './autocomplete.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AutocompleteComponent<T> {\n  label = input<string>('');\n  defaultValue = input<string>();\n  options = input.required<T[]>();\n  control = input.required<FormControl<unknown>>();\n\n  optionTemplate = input<TemplateRef<unknown>>();\n\n  @ContentChild(OptionContentDirective)\n  optionContentDirective!: OptionContentDirective;\n\n  @Input() displayFn: (option: T) => string = () => '';\n\n  @Output() queryChanged = new EventEmitter<string>();\n  @Output() optionSelected = new EventEmitter<T>();\n\n  #valueChanged: Subject<string> = new Subject();\n\n  private onTermChanged = rxMethod<string>(\n    pipe(\n      debounceTime(300),\n      distinctUntilChanged(),\n      map((value) => (!value ? this.defaultValue() : value)),\n      tap((value) => this.queryChanged.emit(value))\n    )\n  );\n\n  constructor() {\n    effect(\n      () => {\n        if (this.control()) {\n          this.onTermChanged(this.#valueChanged.asObservable());\n        }\n      },\n      { allowSignalWrites: true }\n    );\n  }\n\n  onOptionSelected(event: MatAutocompleteSelectedEvent): void {\n    const option: T = event.option.value;\n    this.optionSelected.emit(option);\n  }\n\n  onInputChanged() {\n    this.#valueChanged.next(this.control().value as string);\n  }\n}\n","<mat-form-field appearance=\"outline\">\n  @if(!!label()) {\n  <ng-container>\n    <mat-label>{{ label() }}</mat-label>\n  </ng-container>\n  }\n  <input\n    #input\n    type=\"text\"\n    matInput\n    autocomplete=\"off\"\n    [formControl]=\"control()\"\n    [matAutocomplete]=\"auto\"\n    (input)=\"onInputChanged()\"\n  />\n  <mat-autocomplete\n    (optionSelected)=\"onOptionSelected($event)\"\n    autoActiveFirstOption\n    [displayWith]=\"displayFn\"\n    #auto=\"matAutocomplete\"\n  >\n    <ng-container *ngFor=\"let option of options()\">\n      <mat-option [value]=\"option\">\n        <ng-container *ngIf=\"optionContentDirective; else defaultTemplate\">\n          <ng-container\n            *ngTemplateOutlet=\"\n              optionContentDirective.template;\n              context: { $implicit: option }\n            \"\n          ></ng-container>\n        </ng-container>\n\n        <ng-template #defaultTemplate>\n          {{ option }}\n        </ng-template>\n      </mat-option>\n    </ng-container>\n  </mat-autocomplete>\n</mat-form-field>\n","export interface FormServerError {\n    control: string;\n    message: string;\n  }\n  \n  \n  export enum FormErrorType {\n    Required = 'required',\n    Pattern = 'pattern',\n    EmailPattern = 'email',\n    Server = 'serverError',\n  }\n  ","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Output,\n  input,\n} from \"@angular/core\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatCard, MatCardContent } from \"@angular/material/card\";\nimport { RouterModule } from \"@angular/router\";\n\n@Component({\n  selector: \"dom-card-button\",\n  standalone: true,\n  imports: [RouterModule, MatButtonModule, MatCard, MatCardContent],\n  \n  template: `<mat-card>\n    <mat-card-content>\n      <section>\n        <button\n          mat-raised-button\n          [disableRipple]=\"true\"\n          color=\"accent\"\n          [routerLink]=\"routerLink()\">\n          {{ label() }} <b>{{ boldLabel() }}</b>\n        </button>\n      </section>\n    </mat-card-content>\n  </mat-card> `,\n\n  styles: `mat-card {\n    height: 100%;\n    justify-content: center;\n  \n    mat-card-content {\n      padding: 32px;\n  \n      button {\n        width: 100%;\n      }\n    }\n  }\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CardButtonComponent {\n  label = input<string>();\n  boldLabel = input<string>();\n  routerLink = input<string>();\n\n  @Output() clicked: EventEmitter<void> = new EventEmitter<void>();\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatDividerModule } from '@angular/material/divider';\n\n@Component({\n  selector: 'dom-divider-header',\n  standalone: true,\n  imports: [CommonModule, MatDividerModule],\n  template: `\n    <section class=\"divider\">\n    <mat-divider></mat-divider>\n    <span> {{ label }} </span>\n    <mat-divider></mat-divider>\n  </section>\n  `,\n  styles: [\n    `section.divider {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    mat-divider {\n      width: 100%;\n    }\n\n    span {\n      margin:8px;\n      flex-shrink: 0;\n      text-align: center;\n    }\n  } `\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n\n})\nexport class DividerHeaderComponent {\n\n  @Input({ required: true }) label = \"Hallow\"\n\n}\n","import { Injectable, Signal, WritableSignal, signal } from \"@angular/core\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class FlipContainerService {\n  private _isFlipped: WritableSignal<boolean> = signal(false);\n\n  public flip(): void {\n    this._isFlipped.update((value: boolean) => !value);\n  }\n\n  public getFlipState(): Signal<boolean> {\n    return this._isFlipped;\n  }\n}\n","import {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n} from \"@angular/animations\";\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Output,\n  Signal,\n  inject,\n} from \"@angular/core\";\nimport { FlipContainerService } from \"./flip-container.service\";\n\n@Component({\n  selector: \"dom-flip-container\",\n  standalone: true,\n  template: `\n    <div\n      [@flip]=\"isFlipped() ? 'back' : 'front'\"\n      (click)=\"onClick()\"\n      (keyup)=\"handleKeyUp($event)\"\n      tabindex=\"0\">\n      <div class=\"card-inner\">\n        <div class=\"card-front\">\n          <ng-content select=\".front\"></ng-content>\n        </div>\n        <div class=\"card-back\">\n          <ng-content select=\".back\"></ng-content>\n        </div>\n      </div>\n    </div>\n  `,\n  styleUrls: [\"./flip-container.component.scss\"],\n  animations: [\n    trigger(\"flip\", [\n      state(\n        \"front\",\n        style({\n          transform: \"rotateY(0deg)\",\n        })\n      ),\n      state(\n        \"back\",\n        style({\n          transform: \"rotateY(180deg)\",\n        })\n      ),\n      transition(\"front <=> back\", [animate(\"0.5s\")]),\n    ]),\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FlipCardComponent {\n  @Output() flip: EventEmitter<void> = new EventEmitter();\n\n  public readonly isFlipped: Signal<boolean>;\n  constructor() {\n    this.isFlipped = inject(FlipContainerService).getFlipState();\n  }\n\n  public onClick() {\n    this.flip.emit();\n  }\n\n  handleKeyUp(event: KeyboardEvent): KeyboardEvent {\n    return event;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Output,\n  input,\n} from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatIconModule } from \"@angular/material/icon\";\nimport { RouterModule } from \"@angular/router\";\n\nexport type Side = \"left\" | \"right\" | { error: string };\n\n@Component({\n  selector: \"dom-floating-button\",\n  standalone: true,\n  imports: [CommonModule, RouterModule, MatButtonModule, MatIconModule],\n  template: `\n    <button\n      mat-raised-button\n      [disableRipple]=\"true\"\n      color=\"accent\"\n      [style.right.px]=\"side() === 'left' ? null : 0\"\n      [style.left.px]=\"side() === 'right' ? null : 0\"\n      [style.border-top-right-radius.px]=\"side() === 'left' ? 25 : null\"\n      [style.border-bottom-right-radius.px]=\"side() === 'left' ? 25 : null\"\n      [style.border-top-left-radius.px]=\"side() === 'right' ? 25 : null\"\n      [style.border-bottom-left-radius.px]=\"side() === 'right' ? 25 : null\"\n      [routerLink]=\"routerLink()\"\n      (click)=\"clicked.emit()\">\n      {{ label() | titlecase }}\n    </button>\n  `,\n  styles: [\n    `\n      button {\n        position: fixed;\n        top: 64px;\n      }\n    `,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FloatingButtonComponent {\n  side = input<Side>(\"right\");\n  label = input<string>();\n  routerLink = input<string>();\n\n  @Output() clicked: EventEmitter<void> = new EventEmitter<void>();\n}\n","import { Component, Input } from '@angular/core';\nimport { MatIconModule } from '@angular/material/icon';\n\n@Component({\n  selector: 'dom-info-card',\n  standalone: true,\n  imports: [MatIconModule],\n  template: `\n    <section class=\"info-card-wrapper\">\n      <mat-icon color=\"primary\">{{ icon }}</mat-icon>\n      <span class=\"info-card-text\">{{ text }}</span>\n    </section>\n  `,\n\n  styles: `\n  \n    @mixin flex-center($direction: row, $gap: 1) {\n    display: flex;\n    flex-direction: $direction;\n    justify-content: center;\n    align-items: center;\n    gap: #{$gap * 8 + \"px\"}; \n  }\n\n  section.info-card-wrapper {\n\n  @include flex-center(column, 2);\n\n    mat-icon { scale: 2; }\n}\n\n  `,\n})\nexport class InfoCardComponent {\n  @Input() text!: string;\n  @Input() icon = 'attach_email'; // Default icon value if not provided\n}\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[domTableActionCell]',\r\n  standalone: true,\r\n})\r\nexport class ActionCellDirective {\r\n  constructor(public template: TemplateRef<unknown>) {}\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[domTableFormCell]',\r\n  standalone: true,\r\n})\r\nexport class FormCellDirective {\r\n  constructor(public template: TemplateRef<unknown>) {}\r\n}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  OnInit,\r\n  Output,\r\n  Signal,\r\n  computed,\r\n  input\r\n} from '@angular/core';\r\n\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatButtonModule, MatIconButton } from '@angular/material/button';\r\nimport { MatIcon } from '@angular/material/icon';\r\nimport { MatTooltip } from '@angular/material/tooltip';\r\n\r\n// export interface ButtonActionState {\r\n//   editState?: ActionState;\r\n//   deleteState?: ActionState;\r\n// }\r\n\r\n@Component({\r\n  selector: 'dom-table-actions-cell',\r\n  standalone: true,\r\n  imports: [CommonModule, MatButtonModule, MatIconButton, MatTooltip, MatIcon],\r\n  templateUrl: './table-action-cell.component.html',\r\n  styleUrls: ['./table-action-cell.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TableActionCellComponent implements OnInit {\r\n\r\n  icon = input<string>('');\r\n  tooltip = input<string>('');\r\n  text = input<string>('');\r\n\r\n  isDisabled = input<boolean>(false);\r\n\r\n  isIconButton!: Signal<boolean>;\r\n\r\n  @Output() actionClicked = new EventEmitter<void>();\r\n\r\n  ngOnInit(): void {\r\n    this.isIconButton = computed(() => !!this.icon());\r\n  }\r\n\r\n  onActionButtonClick(): void {\r\n    this.actionClicked.emit();\r\n  }\r\n}\r\n","@if (isIconButton()) {\r\n\r\n<button\r\n  mat-icon-button\r\n  type=\"button\"\r\n  (click)=\"onActionButtonClick()\"\r\n  [disabled]=\"isDisabled()\"\r\n  [matTooltip]=\"tooltip()\"\r\n>\r\n  <mat-icon [fontIcon]=\"icon()\"></mat-icon>\r\n</button>\r\n} @else {\r\n<button\r\n  mat-flat-button\r\n  type=\"button\"\r\n  (click)=\"onActionButtonClick()\"\r\n  [disabled]=\"isDisabled()\"\r\n  [matTooltip]=\"tooltip()\"\r\n>\r\n  {{ text() }}\r\n</button>\r\n}\r\n<!-- slots buttons -->\r\n<!-- <ng-container>\r\n    <ng-template\r\n      *ngTemplateOutlet=\"\r\n        endSlot;\r\n        context: {\r\n          $implicit: rowState\r\n        }\r\n      \"\r\n    ></ng-template>\r\n  </ng-container> -->\r\n","import { ChangeDetectionStrategy, Component, input } from '@angular/core';\r\n// import { QuestionGroupModel } from '../../../../form/models/question-group.model';\r\n// import { QuestionBase } from '../../../../form/models/question.model';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\n\r\n@Component({\r\n  selector: 'dom-table-form-cell',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    MatSelectModule,\r\n    MatFormFieldModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n  ],\r\n  templateUrl: './table-cell-form.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TableFormCellComponent {\r\n  // public readonly group = input.required<FormGroup>();\r\n  // public readonly columnDef = input.required<string>();\r\n  // public readonly type = input.required<string>();\r\n}\r\n","<div>form cell</div>\r\n","import { GridKeyValue } from './gridColDef';\n\nexport type GridValidRowModel = { [key: string | symbol]: unknown };\n\nexport type GridRowsProp<R extends GridValidRowModel = GridValidRowModel> =\n  Readonly<GridRowModel<R>[]>;\n\n/**\n * The key value object representing the data of a row.\n */\nexport type GridRowModel<R extends GridValidRowModel = GridValidRowModel> = R;\n\nexport type GridUpdateAction = 'delete';\n\nexport interface GridRowModelUpdate extends GridRowModel {\n  _action?: GridUpdateAction;\n}\n\n/**\n * The grid rows total height and row positions.\n */\nexport interface GridRowsMeta {\n  /**\n   * The sum of all grid rows.\n   */\n  totalHeight: number;\n  /**\n   * The grid rows positions.\n   */\n  positions: number[];\n}\n\nexport interface GridTreeBasicNode {\n  /**\n   * The uniq id of this node.\n   */\n  id: GridRowId;\n  /**\n   * Depth of this node in the tree.\n   */\n  depth: number;\n}\n\nexport interface GridLeafNode extends GridTreeBasicNode {\n  type: 'leaf';\n  /**\n   * The id of the group containing this node.\n   */\n  parent: GridRowId;\n  /**\n   * The key used to group the children of this row.\n   */\n  groupingKey: GridKeyValue | null;\n}\n\nexport interface GridBasicGroupNode extends GridTreeBasicNode {\n  type: 'group';\n  /**\n   * The key used to group the children of this row.\n   */\n  groupingKey: GridKeyValue | null;\n  /**\n   * The field used to group the children of this row.\n   * Is `null` if no field has been used to group the children of this row.\n   */\n  groupingField: string | null;\n  /**\n   * The id of the body children nodes.\n   * Only contains the children of type \"group\" and \"leaf\".\n   */\n  children: GridRowId[];\n  /**\n   * The id of the footer child node.\n   */\n  footerId?: GridRowId | null;\n  /**\n   * The id of the children nodes, grouped by grouping field and grouping key.\n   * Only contains the children of type \"group\" and \"leaf\".\n   * Empty for flat tree.\n   */\n  childrenFromPath: GridChildrenFromPathLookup;\n  /**\n   * If `true`, the children of this group are not visible.\n   * @default false\n   */\n  childrenExpanded?: boolean;\n  /**\n   * The id of the group containing this node (null for the root group).\n   */\n  parent: GridRowId | null;\n  /**\n   * If `true`, this row is pinned.\n   * @default false\n   */\n  isPinned?: boolean;\n}\n\nexport interface GridAutoGeneratedGroupNode extends GridBasicGroupNode {\n  /**\n   * If `true`, this node has been automatically generated by the grid.\n   * In the row grouping, all groups are auto-generated\n   * In the tree data, some groups can be passed in the rows\n   */\n  isAutoGenerated: true;\n}\n\nexport interface GridDataGroupNode extends GridBasicGroupNode {\n  /**\n   * If `true`, this node has been automatically generated by the grid.\n   * In the row grouping, all groups are auto-generated\n   * In the tree data, some groups can be passed in the rows\n   */\n  isAutoGenerated: false;\n}\n\nexport type GridGroupNode = GridDataGroupNode | GridAutoGeneratedGroupNode;\n\nexport type GridChildrenFromPathLookup = {\n  [groupingField: string]: {\n    [groupingKey: string]: GridRowId;\n  };\n};\n\nexport interface GridFooterNode extends GridTreeBasicNode {\n  type: 'footer';\n  /**\n   * The id of the group containing this node.\n   */\n  parent: GridRowId;\n}\n\nexport interface GridSkeletonRowNode extends GridTreeBasicNode {\n  type: 'skeletonRow';\n  /**\n   * The id of the group containing this node.\n   * Is always equal to `GRID_ROOT_GROUP_ID`.\n   */\n  parent: GridRowId;\n}\n\ninterface GridBasicPinnedRowNode extends GridTreeBasicNode {\n  type: 'pinnedRow';\n  /**\n   * The id of the group containing this node.\n   * Is always equal to `GRID_ROOT_GROUP_ID`.\n   */\n  parent: GridRowId;\n}\n\nexport interface GridDataPinnedRowNode extends GridBasicPinnedRowNode {\n  /**\n   * If `true`, this node has been automatically generated by the grid.\n   */\n  isAutoGenerated: true;\n}\n\nexport interface GridAutoGeneratedPinnedRowNode extends GridBasicPinnedRowNode {\n  /**\n   * If `true`, this node has been automatically generated by the grid.\n   */\n  isAutoGenerated: false;\n}\n\nexport type GridPinnedRowNode =\n  | GridDataPinnedRowNode\n  | GridAutoGeneratedPinnedRowNode;\n\nexport type GridTreeNode =\n  | GridLeafNode\n  | GridGroupNode\n  | GridFooterNode\n  | GridPinnedRowNode\n  | GridSkeletonRowNode;\n\nexport type GridTreeNodeWithRender =\n  | GridLeafNode\n  | GridGroupNode\n  | GridFooterNode\n  | GridPinnedRowNode;\n\nexport type GridRowTreeConfig = Record<GridRowId, GridTreeNode>;\n\n/**\n * The type of Id supported by the grid.\n */\nexport type GridRowId = string | number;\n\nexport interface GridRowEntry<R extends GridValidRowModel = GridValidRowModel> {\n  /**\n   * The row id.\n   */\n  id: GridRowId;\n  /**\n   * The row model.\n   */\n  model: R;\n}\n\n/**\n * The function to retrieve the id of a [[GridRowModel]].\n */\nexport type GridRowIdGetter<R extends GridValidRowModel = GridValidRowModel> = (\n  row: R\n) => GridRowId;\n\nexport enum GridRowModes {\n  Edit = 'edit',\n  View = 'view',\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Signal,\n  WritableSignal,\n  computed,\n  contentChild,\n  input,\n  signal,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { MatIconButton } from '@angular/material/button';\nimport { MatIcon } from '@angular/material/icon';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatTableModule } from '@angular/material/table';\nimport { GridBaseColDef } from './models/gridColDef';\nimport { GridRowModes } from './models/gridRows';\nimport { ActionCellDirective } from './table-action-cell/table-cell-action.directive';\nimport { FormCellDirective } from './table-form-cell/table-cell-form.directive';\n\n@Component({\n  selector: 'dom-table',\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatIcon,\n    MatIconButton,\n  ],\n  templateUrl: './table.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TableComponent<T> {\n  public actionColumn = contentChild(ActionCellDirective);\n\n  public formColumn = contentChild(FormCellDirective);\n\n  idKey = input<string>('id');\n\n  dataSource = input.required<T[]>();\n\n  columns = input.required<GridBaseColDef[]>();\n\n  editRow = input<boolean>(false);\n\n  rowModesModel = input<{ [key: string]: GridRowModes }>({});\n\n  rowFormGroupModel: Signal<{ [key: string]: FormGroup }> = computed(() => {\n    return Object.keys(this.rowModesModel()).reduce((acc, key) => {\n      if (this.rowModesModel()[key] === GridRowModes.Edit) {\n        acc[key] = new FormGroup({});\n      }\n      return acc;\n    }, {} as { [key: string]: FormGroup });\n  });\n\n  public readonly tableColumns = this.computeTableColumns();\n  public readonly displayedColumns = this.computeDisplayColumns();\n\n  public readonly showEdit: WritableSignal<{ [key: string]: boolean }> = signal(\n    {}\n  );\n\n  computeTableColumns() {\n    return computed(() => {\n      const columns = this.columns();\n\n      const withEditColumn = this.editRow()\n        ? [\n            ...columns,\n            {\n              field: 'actions',\n              type: 'actions',\n            } as GridBaseColDef,\n          ]\n        : columns;\n\n      return withEditColumn;\n    });\n  }\n\n  computeDisplayColumns() {\n    return computed(() => this.tableColumns().map((column) => column.field));\n  }\n}\n","<table mat-table [dataSource]=\"dataSource()\" class=\"mat-elevation-z8\">\n  <!--- Note that these columns can be defined in any order.\n              The actual rendered columns are set as a property on the row definition\" -->\n\n  @for (column of tableColumns(); track $index) {\n\n  <ng-container [matColumnDef]=\"column.field\">\n    <th mat-header-cell *matHeaderCellDef>\n      {{ column.headerName | titlecase }}\n    </th>\n\n    @if(column.type !== 'actions') {\n\n    <td mat-cell *matCellDef=\"let element\">\n      @if( column.editable && rowModesModel()![element[idKey()]] === 'edit') {\n      @defer (when column.editable && rowModesModel()![element[idKey()]] ===\n      'edit') {\n\n      <ng-container\n        *ngTemplateOutlet=\"formCell; context: { $implicit: element }\"\n      ></ng-container>\n\n      } } @else { {{ element[column.field] }}}\n    </td>\n\n    } @else {\n    <td mat-cell *matCellDef=\"let element\">\n      <ng-container\n        *ngTemplateOutlet=\"actionCell; context: { $implicit: element }\"\n      ></ng-container>\n    </td>\n    }\n  </ng-container>\n\n  }\n\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns()\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns()\"></tr>\n</table>\n\n<ng-template #formCell let-element>\n  @if(formColumn()) {\n  <ng-container\n    *ngTemplateOutlet=\"formColumn()!.template; context: { $implicit: element }\"\n  ></ng-container>\n  }\n</ng-template>\n\n<ng-template #actionCell let-element>\n  @if(actionColumn()){\n\n  <ng-container\n    *ngTemplateOutlet=\"\n      actionColumn()!.template;\n      context: { $implicit: element }\n    \"\n  ></ng-container>\n  }\n</ng-template>\n","import { Injector, inject, runInInjectionContext } from '@angular/core';\nimport { tapResponse } from '@ngrx/operators';\nimport { StateSignal, patchState } from '@ngrx/signals';\nimport { EntityId, addEntities, setAllEntities } from '@ngrx/signals/entities';\nimport { rxMethod } from '@ngrx/signals/rxjs-interop';\nimport { EMPTY, Observable, pipe, switchMap } from 'rxjs';\nimport { Entity, EntityLoader, LoaderService } from './types';\n\nexport function onLoadSlice<Entity extends { id: EntityId }>(\n  state: StateSignal<object>,\n  slice: keyof StateSignal<object>\n) {\n  return (res: Entity[] | Entity) => patchState(state, { [slice]: res });\n}\n\nexport function onLoadEntities<Entity extends { id: EntityId }>(\n  state: StateSignal<object>\n) {\n  return (res: Entity[]) => patchState(state, addEntities(res));\n}\n\n// Function to handle the success response of loading entities\nexport function onLoadCollection<Entity extends { id: EntityId }>(\n  state: StateSignal<object>,\n  collection: string\n) {\n  return (res: Entity[] | Entity) =>\n    patchState(state, addEntities(res as Entity[], { collection }));\n}\n\n// Function to handle the success response of loading entities\nexport function onUpdateCollection<Entity extends { id: EntityId }>(\n  state: StateSignal<object>,\n  collection: string\n) {\n  return (res: Entity[] | Entity) => {\n    patchState(\n      state as StateSignal<object>,\n      setAllEntities(res as Entity[], { collection })\n    );\n  };\n}\n\n/**\n * Creates a function that invokes a specified method on a LoaderService instance.\n * @param Loader The LoaderService instance.\n * @param methodName The name of the method to invoke on the LoaderService instance.\n * @returns A function that accepts parameters for the specified method and returns an Observable of the result.\n * @template T The type of parameters accepted by the method.\n */\n\nexport function createLoader<T>(\n  Loader: LoaderService<EntityLoader<T, Entity, string>>,\n  methodName: string\n): (...args: T[]) => Observable<Entity[] | Entity> {\n  return runInInjectionContext(inject(Injector), () => {\n    const loader = inject(Loader);\n    return (query: T) => loader[methodName](query);\n  });\n}\n\nexport function loadCollection<T>(\n  loader: (query: T) => Observable<Entity[]>,\n  next: (value: Entity[]) => void\n) {\n  return rxMethod<T>(\n    pipe(\n      switchMap((query) =>\n        loader(query).pipe(\n          tapResponse({\n            next: next,\n            error: () => EMPTY,\n          })\n        )\n      )\n    )\n  );\n}\n\n/**\n * Loads entities using the provided loader function and invokes the specified\n * callback with the result.\n * @param loader A function that accepts a query parameter of type T and returns\n *               an Observable of Entity or Entity[].\n * @param next A callback function to handle the result of the loading operation.\n * @template T The type of the query parameter.\n */\n\nexport function loadEntities<T>(\n  loader: (query: T) => Observable<Entity[] | Entity>,\n  next: (value: Entity[] | Entity) => void\n) {\n  return rxMethod<T>(\n    pipe(\n      switchMap((query) =>\n        loader(query).pipe(\n          tapResponse({\n            next: next,\n            error: () => EMPTY,\n          })\n        )\n      )\n    )\n  );\n}\n\nexport function loadSlice<T>(\n  loader: (query: T) => Observable<Entity[] | Entity>,\n  state: StateSignal<object>,\n  slice: string\n) {\n  return rxMethod<T>(\n    pipe(\n      switchMap((query: T) =>\n        loader(query).pipe(\n          tapResponse({\n            next: (res: Entity[] | Entity) =>\n              patchState(state, { [slice]: res }),\n            error: () => EMPTY,\n          })\n        )\n      )\n    )\n  );\n}\n","function toCamelCase(str: string): string {\n  return str\n    .split(' ') // Split the string into words\n    .map(\n      (word, index) =>\n        index === 0\n          ? word.toLowerCase() // Lowercase the first word\n          : word.charAt(0).toUpperCase() + word.slice(1).toLowerCase() // Capitalize the first letter of subsequent words\n    )\n    .join(''); // Join the words back together\n}\n\nexport function loadMethod(input: string): string {\n  const camelCaseString = toCamelCase(input);\n  return `load${camelCaseString}`;\n}\n","/* eslint-disable @nx/enforce-module-boundaries */\nexport * from './lib/dom/components/index';\n\nexport * from './lib/dom/directives/index';\n\nexport * from './lib/dom/helpers/index';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["tap","map","startWith","i2","i3","i1"],"mappings":"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"}