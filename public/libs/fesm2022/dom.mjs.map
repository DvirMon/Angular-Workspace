{"version":3,"file":"dom.mjs","sources":["../../../libs/src/lib/dom/components/search-input/search-input.component.ts","../../../libs/src/lib/dom/components/search-input/search-input.component.html","../../../libs/src/lib/dom/directives/optionContent.directive.ts","../../../libs/src/lib/dom/directives/parallax.directive.ts","../../../libs/src/lib/dom/components/autocomplete/autocomplete.component.ts","../../../libs/src/lib/dom/components/autocomplete/autocomplete.component.html","../../../libs/src/lib/dom/components/form-input/form.helper.ts","../../../libs/src/lib/dom/components/form-input/form-input.component.ts","../../../libs/src/lib/dom/components/form-input/form-input.component.html","../../../libs/src/lib/dom/helpers/entities.helpers.ts","../../../libs/src/lib/dom/helpers/script.helpers.ts","../../../libs/src/index.ts","../../../libs/src/dom.ts"],"sourcesContent":["import { CommonModule } from '@angular/common';\nimport { Component, EventEmitter, OnInit, Output, input } from '@angular/core';\nimport { FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { rxMethod } from '@ngrx/signals/rxjs-interop';\nimport { debounceTime, distinctUntilChanged, pipe, tap } from 'rxjs';\n\nexport interface SearchResultsData {\n  totalResults: number;\n}\n\n@Component({\n  selector: 'dom-search-input',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatInputModule,\n    MatFormFieldModule,\n  ],\n  templateUrl: './search-input.component.html',\n  styleUrls: ['./search-input.component.scss'],\n})\nexport class SearchInputComponent implements OnInit {\n  initialValue = input<string>();\n  searchResultsData = input<SearchResultsData>();\n\n  searchControl: FormControl<string> = new FormControl();\n\n  @Output() termChanged = new EventEmitter<string>();\n\n  private onTermChanged = rxMethod<string>(\n    pipe(\n      debounceTime(300),\n      distinctUntilChanged(),\n      tap((value) => this.termChanged.emit(value))\n    )\n  );\n\n  constructor() {\n    this.onTermChanged(this.searchControl.valueChanges);\n  }\n\n  ngOnInit(): void {\n    // Set initial value if provided\n\n    const value: string | undefined = this.initialValue();\n\n    if (value != undefined) {\n      this.searchControl.setValue(value);\n    }\n  }\n}\n","<mat-form-field>\n  <input matInput type=\"text\" [formControl]=\"searchControl\" />\n  <!-- @if (searchResultsData()!.totalResults !== 0) {\n    <span matSuffix\n      >{{ searchResultsData()!.totalResults }} results\n    </span>\n  } -->\n</mat-form-field>\n","import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({\n  selector: '[domOptionContent]',\n  standalone: true,\n})\nexport class OptionContentDirective {\n  constructor(public template: TemplateRef<unknown>) {}\n}\n","import { Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[domParallax]',\n  standalone: true,\n})\nexport class ParallaxDirective {\n\n  constructor(private el: ElementRef, private renderer: Renderer2) { }\n\n  @HostListener(\"scroll\", [\"$event\"])\n  onScroll(event: Event) {\n    const scrollPosition = (event.target as HTMLElement).scrollTop;\n    this.renderer.setStyle(\n      this.el.nativeElement,\n      'backgroundPositionY',\n      `${scrollPosition * 0.5}px`\n    );\n  }\n}","import { NgFor, NgIf, NgTemplateOutlet } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  EventEmitter,\n  Input,\n  Output,\n  TemplateRef,\n  effect,\n  input,\n} from '@angular/core';\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\nimport {\n  MatAutocomplete,\n  MatAutocompleteSelectedEvent,\n  MatAutocompleteTrigger,\n} from '@angular/material/autocomplete';\nimport { MatOption } from '@angular/material/core';\nimport { MatFormField, MatLabel } from '@angular/material/form-field';\nimport { MatInput } from '@angular/material/input';\nimport { rxMethod } from '@ngrx/signals/rxjs-interop';\nimport {\n  Subject,\n  debounceTime,\n  distinctUntilChanged,\n  map,\n  pipe,\n  tap,\n} from 'rxjs';\n// eslint-disable-next-line @nx/enforce-module-boundaries\nimport { OptionContentDirective } from '../../directives';\n\n\n@Component({\n  selector: 'dom-autocomplete',\n  standalone: true,\n  imports: [\n    NgFor,\n    NgIf,\n    ReactiveFormsModule,\n    NgTemplateOutlet,\n    MatFormField,\n    MatLabel,\n    MatInput,\n    MatAutocompleteTrigger,\n    MatAutocomplete,\n    MatOption,\n    OptionContentDirective,\n  ],\n  templateUrl: './autocomplete.component.html',\n  styleUrl: './autocomplete.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AutocompleteComponent<T> {\n  label = input<string>('Search...');\n  defaultValue = input<string>();\n  options = input.required<T[]>();\n  control = input.required<FormControl<T>>();\n\n  optionTemplate = input<TemplateRef<unknown>>();\n\n  @ContentChild(OptionContentDirective)\n  optionContentDirective!: OptionContentDirective;\n\n  @Input() displayFn: (option: T) => string = () => '';\n\n  @Output() queryChanged = new EventEmitter<string>();\n  @Output() optionSelected = new EventEmitter<T>();\n\n  valueChanged: Subject<string> = new Subject();\n\n  private onQueryChange = rxMethod<string>(\n    pipe(\n      debounceTime(300),\n      distinctUntilChanged(),\n      map((value) => (!value ? this.defaultValue() : value)),\n      tap((value) => this.queryChanged.emit(value))\n    )\n  );\n\n  constructor() {\n    effect(\n      () => {\n        if (this.control()) {\n          this.onQueryChange(this.valueChanged.asObservable());\n        }\n      },\n      { allowSignalWrites: true }\n    );\n  }\n\n  onOptionSelected(event: MatAutocompleteSelectedEvent): void {\n    const option: T = event.option.value;\n    this.optionSelected.emit(option);\n  }\n\n  onQueryChanged() {\n    this.valueChanged.next(this.control().value as string);\n  }\n}\n","<mat-form-field appearance=\"outline\">\n  <mat-label>{{ label() }}</mat-label>\n  <input\n    #input\n    type=\"text\"\n    matInput\n    autocomplete=\"off\"\n    [formControl]=\"control()\"\n    [matAutocomplete]=\"auto\"\n    (input)=\"onQueryChanged()\"\n  />\n  <mat-autocomplete\n    (optionSelected)=\"onOptionSelected($event)\"\n    autoActiveFirstOption\n    [displayWith]=\"displayFn\"\n    #auto=\"matAutocomplete\"\n  >\n    <ng-container *ngFor=\"let option of options()\">\n      <mat-option [value]=\"option\">\n        <ng-container *ngIf=\"optionContentDirective; else defaultTemplate\">\n          <ng-container\n            *ngTemplateOutlet=\"\n              optionContentDirective.template;\n              context: { $implicit: option }\n            \"\n          ></ng-container>\n        </ng-container>\n\n        <ng-template #defaultTemplate>\n          {{ option }}\n        </ng-template>\n      </mat-option>\n    </ng-container>\n  </mat-autocomplete>\n</mat-form-field>\n","import {\n  Injector,\n  Signal,\n  WritableSignal,\n  effect,\n  signal,\n} from '@angular/core';\nimport { FormGroup, ValidationErrors } from '@angular/forms';\n\nexport interface FormServerError {\n  control: string;\n  message: string;\n}\n\nexport function getFormKeys(obj: FormGroup): WritableSignal<string[]> {\n  return signal(Object.keys(obj.controls));\n}\n\nexport enum FormErrorType {\n  Required = 'required',\n  Pattern = 'pattern',\n  EmailPattern = 'email',\n  Server = 'serverError',\n}\n\nexport const errorMessageMap: ValidationErrors = {\n  required: 'required',\n  pattern: 'invalid pattern',\n  email: 'invalid email format',\n};\n\nexport function setFormError(group: FormGroup, error: FormServerError): void {\n  if (group !== null && error !== null) {\n    const control = group.get(error.control as string);\n\n    if (control != null) {\n      control.setErrors({ serverError: error.message });\n    }\n  }\n}\n\nexport function handleServerErrorEffect(\n  injector: Injector,\n  serverError: Signal<FormServerError | undefined>,\n  form: FormGroup\n): void {\n  effect(\n    () => {\n      const error = serverError();\n\n      if (error) {\n        setFormError(form, error);\n      }\n    },\n    { allowSignalWrites: true, injector }\n  );\n}\n","import { CommonModule } from \"@angular/common\";\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Injector,\n  OnInit,\n  Signal,\n  computed,\n  inject,\n  input,\n  runInInjectionContext,\n} from \"@angular/core\";\nimport { toSignal } from \"@angular/core/rxjs-interop\";\nimport {\n  AbstractControl,\n  FormControl,\n  ReactiveFormsModule,\n  ValidationErrors,\n} from \"@angular/forms\";\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\nimport { MatInputModule } from \"@angular/material/input\";\nimport { Observable, map, startWith } from \"rxjs\";\nimport { errorMessageMap } from \"./form.helper\";\n\n@Component({\n  selector: \"dom-form-input\",\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    MatFormFieldModule,\n    MatInputModule,\n  ],\n  templateUrl: \"./form-input.component.html\",\n  styleUrls: [\"./form-input.component.scss\"],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FormInputComponent implements OnInit {\n  private readonly _injector: Injector = inject(Injector);\n\n  control = input.required<AbstractControl<unknown, unknown> | null>();\n  key = input.required<string>();\n  type = input<string>();\n  label = input<string>();\n  hint = input<string>();\n  errorsMap = input<ValidationErrors>();\n\n  formControl!: Signal<FormControl>;\n  errorMessage!: Signal<string | undefined>;\n  hasError!: Signal<boolean>;\n\n  ngOnInit(): void {\n    this.formControl = computed(() => this.control() as FormControl);\n    this.hasError = this._setHasErrorSignal(this.formControl());\n    this.errorMessage = this._setErrorMessageSignal(this.formControl());\n  }\n\n  private _setErrorMessageSignal(formControl: FormControl): Signal<string> {\n    return runInInjectionContext(this._injector, () =>\n      toSignal(this._setErrorObservable(formControl), {\n        initialValue: this._getErrorMessage(formControl),\n      })\n    );\n  }\n\n  private _setErrorObservable(formControl: FormControl): Observable<string> {\n    return formControl.statusChanges.pipe(\n      map(() => this._getErrorMessage(formControl))\n    );\n  }\n\n  private _setHasErrorSignal(formControl: FormControl): Signal<boolean> {\n    return runInInjectionContext(this._injector, () =>\n      toSignal(this._setHasErrorObservable(formControl), {\n        initialValue: false,\n      })\n    );\n  }\n\n  private _setHasErrorObservable(\n    formControl: FormControl\n  ): Observable<boolean> {\n    return formControl.statusChanges.pipe(\n      startWith(formControl.status),\n      map(() => formControl.errors),\n      map((errors: ValidationErrors | null) => !!errors)\n    );\n  }\n\n  // handle input error messages\n  private _getErrorMessage(control: FormControl | AbstractControl): string {\n    const errors = { ...control.errors };\n\n    if (errors) {\n      const errorKeys: string[] = Object.keys(errors as object);\n\n      for (const error of errorKeys) {\n        if (control.hasError(error)) {\n          const errorMap = {\n            ...errors,\n            ...errorMessageMap,\n            ...this.errorsMap(),\n          };\n\n          return errorMap[error] as string;\n        }\n      }\n    }\n\n    return \"\";\n  }\n}\n","<mat-form-field class=\"full-width\">\n  <mat-label>{{ label() }}</mat-label>\n  <input\n    #input\n    matInput\n    [type]=\"type() || 'text'\"\n    [formControl]=\"formControl()\"\n    autocomplete=\"off\"\n    [name]=\"key()\"\n  />\n\n  @if (hint()) {\n\n  <!-- <mat-hint> {{ \"Please enter your \" + hint() }}</mat-hint> -->\n  <mat-hint> {{ formControl().errors }}</mat-hint>\n  } @if (hasError()) {\n  <mat-error>{{ errorMessage() }}</mat-error>\n  }\n</mat-form-field>\n","import {\n  Injector,\n  ProviderToken,\n  Signal,\n  inject,\n  runInInjectionContext,\n} from '@angular/core';\nimport { tapResponse } from '@ngrx/operators';\nimport { StateSignal, patchState } from '@ngrx/signals';\nimport { EntityId, addEntities, setAllEntities } from '@ngrx/signals/entities';\nimport { rxMethod } from '@ngrx/signals/rxjs-interop';\nimport { EMPTY, Observable, pipe, switchMap } from 'rxjs';\n\nexport interface Entity {\n  id: EntityId;\n}\n\nexport type EntityMap = Record<EntityId, Entity>;\n\nexport interface EntityResult<Entity> {\n  content: Entity[];\n}\n\nexport type Loader<T, Entity, MethodName extends string> = {\n  [K in MethodName]: (args: T) => Observable<EntityResult<Entity>>;\n};\n\nexport type LoaderService<T> = ProviderToken<T>;\n\nexport type LoadService<Loader> = ProviderToken<Loader>;\n\nfunction getKey(collection: string): string {\n  return collection == 'entities' ? collection : collection + 'Entities';\n}\n\n// Function to handle the success response of loading entities\nexport function handleLoadEntitiesSuccess<Entity extends { id: EntityId }>(\n  state: unknown,\n  collection: string\n) {\n  return (res: EntityResult<Entity>) => {\n    const key: string = getKey(collection);\n    const localState = state as Record<string, Signal<Array<Entity>>>;\n    const hasEntities = localState[key]()?.length > 0;\n    const update = hasEntities ? setAllEntities : addEntities;\n\n    if (key === 'entities') {\n      patchState(state as StateSignal<object>, update(res.content));\n    } else {\n      patchState(\n        state as StateSignal<object>,\n        update(res.content, { collection })\n      );\n    }\n  };\n}\n\nexport function createLoader<T>(\n  Loader: LoadService<Loader<T, Entity, string>>,\n  methodName: string\n): (...args: T[]) => Observable<EntityResult<Entity>> {\n  return runInInjectionContext(inject(Injector), () => {\n    const loader = inject(Loader);\n    return (query: T) => loader[methodName](query);\n  });\n}\n\nexport function loadEntities<T>(\n  loader: (query: T) => Observable<EntityResult<Entity>>,\n  state: StateSignal<object>,\n  collection = 'entities'\n) {\n  return rxMethod<T>(\n    pipe(\n      switchMap((query) =>\n        loader(query).pipe(\n          tapResponse({\n            next: handleLoadEntitiesSuccess(state, collection),\n            error: () => EMPTY,\n          })\n        )\n      )\n    )\n  );\n}\n\nexport function createSliceLoader<T>(\n  Loader: LoadService<Loader<T, Entity, string>>,\n  methodName: string\n): (args: T) => Observable<EntityResult<Entity>> {\n  return runInInjectionContext(inject(Injector), () => {\n    const loader = inject(Loader);\n    return (query: T) => loader[methodName](query);\n  });\n}\n\nexport function loadSlice<T>(\n  loader: (query: T) => Observable<EntityResult<Entity>>,\n  state: StateSignal<object>,\n  slice: string,\n) {\n  return rxMethod<T>(\n    pipe(\n      switchMap((query) =>\n        loader(query).pipe(\n          tapResponse({\n            next: (res) => patchState(state, { [slice]: res.content }),\n            error: () => EMPTY,\n          })\n        )\n      )\n    )\n  );\n}\n","function toCamelCase(str: string): string {\n  return str\n    .split(' ') // Split the string into words\n    .map(\n      (word, index) =>\n        index === 0\n          ? word.toLowerCase() // Lowercase the first word\n          : word.charAt(0).toUpperCase() + word.slice(1).toLowerCase() // Capitalize the first letter of subsequent words\n    )\n    .join(''); // Join the words back together\n}\n\nexport function loadMethod(input: string): string {\n  const camelCaseString = toCamelCase(input);\n  return `load${camelCaseString}`;\n}\n","/* eslint-disable @nx/enforce-module-boundaries */\nexport * from './lib/dom/components/index';\n\nexport * from './lib/dom/directives/index'\n\nexport * from './lib/dom/helpers/index'","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["i3","i2"],"mappings":";;;;;;;;;;;;;;;;;;MAyBa,oBAAoB,CAAA;AAgB/B,IAAA,WAAA,GAAA;QAfA,IAAY,CAAA,YAAA,GAAG,KAAK,EAAU,CAAC;QAC/B,IAAiB,CAAA,iBAAA,GAAG,KAAK,EAAqB,CAAC;AAE/C,QAAA,IAAA,CAAA,aAAa,GAAwB,IAAI,WAAW,EAAE,CAAC;AAE7C,QAAA,IAAA,CAAA,WAAW,GAAG,IAAI,YAAY,EAAU,CAAC;AAE3C,QAAA,IAAA,CAAA,aAAa,GAAG,QAAQ,CAC9B,IAAI,CACF,YAAY,CAAC,GAAG,CAAC,EACjB,oBAAoB,EAAE,EACtB,GAAG,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAC7C,CACF,CAAC;QAGA,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;KACrD;IAED,QAAQ,GAAA;;AAGN,QAAA,MAAM,KAAK,GAAuB,IAAI,CAAC,YAAY,EAAE,CAAC;AAEtD,QAAA,IAAI,KAAK,IAAI,SAAS,EAAE;AACtB,YAAA,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;SACpC;KACF;8GA5BU,oBAAoB,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA,EAAA;kGAApB,oBAAoB,EAAA,YAAA,EAAA,IAAA,EAAA,QAAA,EAAA,kBAAA,EAAA,MAAA,EAAA,EAAA,YAAA,EAAA,EAAA,iBAAA,EAAA,cAAA,EAAA,UAAA,EAAA,cAAA,EAAA,QAAA,EAAA,IAAA,EAAA,UAAA,EAAA,KAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,EAAA,iBAAA,EAAA,EAAA,iBAAA,EAAA,mBAAA,EAAA,UAAA,EAAA,mBAAA,EAAA,QAAA,EAAA,IAAA,EAAA,UAAA,EAAA,KAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,QAAA,EAAA,EAAA,EAAA,QAAA,ECzBjC,sQAQA,EAAA,MAAA,EAAA,CAAA,wFAAA,CAAA,EAAA,YAAA,EAAA,CAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EDQI,YAAY,EAAA,EAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EACZ,WAAW,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,oBAAA,EAAA,QAAA,EAAA,8MAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,eAAA,EAAA,QAAA,EAAA,2CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EACX,mBAAmB,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,oBAAA,EAAA,QAAA,EAAA,eAAA,EAAA,MAAA,EAAA,CAAA,aAAA,EAAA,UAAA,EAAA,SAAA,CAAA,EAAA,OAAA,EAAA,CAAA,eAAA,CAAA,EAAA,QAAA,EAAA,CAAA,QAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EACnB,cAAc,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,QAAA,EAAA,QAAA,EAAA,yHAAA,EAAA,MAAA,EAAA,CAAA,UAAA,EAAA,IAAA,EAAA,aAAA,EAAA,MAAA,EAAA,UAAA,EAAA,MAAA,EAAA,mBAAA,EAAA,kBAAA,EAAA,OAAA,EAAA,UAAA,CAAA,EAAA,QAAA,EAAA,CAAA,UAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAAA,IAAA,CAAA,YAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,MAAA,EAAA,CAAA,oBAAA,EAAA,OAAA,EAAA,YAAA,EAAA,YAAA,EAAA,iBAAA,EAAA,WAAA,CAAA,EAAA,QAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EACd,kBAAkB,EAAA,CAAA,EAAA,CAAA,CAAA,EAAA;;2FAKT,oBAAoB,EAAA,UAAA,EAAA,CAAA;kBAbhC,SAAS;+BACE,kBAAkB,EAAA,UAAA,EAChB,IAAI,EACP,OAAA,EAAA;wBACP,YAAY;wBACZ,WAAW;wBACX,mBAAmB;wBACnB,cAAc;wBACd,kBAAkB;AACnB,qBAAA,EAAA,QAAA,EAAA,sQAAA,EAAA,MAAA,EAAA,CAAA,wFAAA,CAAA,EAAA,CAAA;wDAUS,WAAW,EAAA,CAAA;sBAApB,MAAM;;;MEzBI,sBAAsB,CAAA;AACjC,IAAA,WAAA,CAAmB,QAA8B,EAAA;QAA9B,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAsB;KAAI;8GAD1C,sBAAsB,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,CAAA,WAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA,EAAA;kGAAtB,sBAAsB,EAAA,YAAA,EAAA,IAAA,EAAA,QAAA,EAAA,oBAAA,EAAA,QAAA,EAAA,EAAA,EAAA,CAAA,CAAA,EAAA;;2FAAtB,sBAAsB,EAAA,UAAA,EAAA,CAAA;kBAJlC,SAAS;AAAC,YAAA,IAAA,EAAA,CAAA;AACT,oBAAA,QAAQ,EAAE,oBAAoB;AAC9B,oBAAA,UAAU,EAAE,IAAI;AACjB,iBAAA,CAAA;;;MCCY,iBAAiB,CAAA;IAE5B,WAAoB,CAAA,EAAc,EAAU,QAAmB,EAAA;QAA3C,IAAE,CAAA,EAAA,GAAF,EAAE,CAAY;QAAU,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAW;KAAK;AAGpE,IAAA,QAAQ,CAAC,KAAY,EAAA;AACnB,QAAA,MAAM,cAAc,GAAI,KAAK,CAAC,MAAsB,CAAC,SAAS,CAAC;AAC/D,QAAA,IAAI,CAAC,QAAQ,CAAC,QAAQ,CACpB,IAAI,CAAC,EAAE,CAAC,aAAa,EACrB,qBAAqB,EACrB,CAAG,EAAA,cAAc,GAAG,GAAG,CAAA,EAAA,CAAI,CAC5B,CAAC;KACH;8GAZU,iBAAiB,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,CAAA,UAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,SAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA,EAAA;kGAAjB,iBAAiB,EAAA,YAAA,EAAA,IAAA,EAAA,QAAA,EAAA,eAAA,EAAA,IAAA,EAAA,EAAA,SAAA,EAAA,EAAA,QAAA,EAAA,kBAAA,EAAA,EAAA,EAAA,QAAA,EAAA,EAAA,EAAA,CAAA,CAAA,EAAA;;2FAAjB,iBAAiB,EAAA,UAAA,EAAA,CAAA;kBAJ7B,SAAS;AAAC,YAAA,IAAA,EAAA,CAAA;AACT,oBAAA,QAAQ,EAAE,eAAe;AACzB,oBAAA,UAAU,EAAE,IAAI;AACjB,iBAAA,CAAA;uGAMC,QAAQ,EAAA,CAAA;sBADP,YAAY;uBAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,CAAA;;;MC4CvB,qBAAqB,CAAA;AA2BhC,IAAA,WAAA,GAAA;AA1BA,QAAA,IAAA,CAAA,KAAK,GAAG,KAAK,CAAS,WAAW,CAAC,CAAC;QACnC,IAAY,CAAA,YAAA,GAAG,KAAK,EAAU,CAAC;AAC/B,QAAA,IAAA,CAAA,OAAO,GAAG,KAAK,CAAC,QAAQ,EAAO,CAAC;AAChC,QAAA,IAAA,CAAA,OAAO,GAAG,KAAK,CAAC,QAAQ,EAAkB,CAAC;QAE3C,IAAc,CAAA,cAAA,GAAG,KAAK,EAAwB,CAAC;AAKtC,QAAA,IAAA,CAAA,SAAS,GAA0B,MAAM,EAAE,CAAC;AAE3C,QAAA,IAAA,CAAA,YAAY,GAAG,IAAI,YAAY,EAAU,CAAC;AAC1C,QAAA,IAAA,CAAA,cAAc,GAAG,IAAI,YAAY,EAAK,CAAC;AAEjD,QAAA,IAAA,CAAA,YAAY,GAAoB,IAAI,OAAO,EAAE,CAAC;QAEtC,IAAa,CAAA,aAAA,GAAG,QAAQ,CAC9B,IAAI,CACF,YAAY,CAAC,GAAG,CAAC,EACjB,oBAAoB,EAAE,EACtB,GAAG,CAAC,CAAC,KAAK,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,YAAY,EAAE,GAAG,KAAK,CAAC,CAAC,EACtD,GAAG,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAC9C,CACF,CAAC;QAGA,MAAM,CACJ,MAAK;AACH,YAAA,IAAI,IAAI,CAAC,OAAO,EAAE,EAAE;gBAClB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC,CAAC;aACtD;AACH,SAAC,EACD,EAAE,iBAAiB,EAAE,IAAI,EAAE,CAC5B,CAAC;KACH;AAED,IAAA,gBAAgB,CAAC,KAAmC,EAAA;AAClD,QAAA,MAAM,MAAM,GAAM,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC;AACrC,QAAA,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KAClC;IAED,cAAc,GAAA;AACZ,QAAA,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,KAAe,CAAC,CAAC;KACxD;8GA7CU,qBAAqB,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA,EAAA;kGAArB,qBAAqB,EAAA,YAAA,EAAA,IAAA,EAAA,QAAA,EAAA,kBAAA,EAAA,MAAA,EAAA,EAAA,KAAA,EAAA,EAAA,iBAAA,EAAA,OAAA,EAAA,UAAA,EAAA,OAAA,EAAA,QAAA,EAAA,IAAA,EAAA,UAAA,EAAA,KAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,EAAA,YAAA,EAAA,EAAA,iBAAA,EAAA,cAAA,EAAA,UAAA,EAAA,cAAA,EAAA,QAAA,EAAA,IAAA,EAAA,UAAA,EAAA,KAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,EAAA,OAAA,EAAA,EAAA,iBAAA,EAAA,SAAA,EAAA,UAAA,EAAA,SAAA,EAAA,QAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,EAAA,OAAA,EAAA,EAAA,iBAAA,EAAA,SAAA,EAAA,UAAA,EAAA,SAAA,EAAA,QAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,EAAA,cAAA,EAAA,EAAA,iBAAA,EAAA,gBAAA,EAAA,UAAA,EAAA,gBAAA,EAAA,QAAA,EAAA,IAAA,EAAA,UAAA,EAAA,KAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,EAAA,SAAA,EAAA,EAAA,iBAAA,EAAA,WAAA,EAAA,UAAA,EAAA,WAAA,EAAA,QAAA,EAAA,KAAA,EAAA,UAAA,EAAA,KAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,YAAA,EAAA,cAAA,EAAA,cAAA,EAAA,gBAAA,EAAA,EAAA,OAAA,EAAA,CAAA,EAAA,YAAA,EAAA,wBAAA,EAAA,KAAA,EAAA,IAAA,EAAA,SAAA,EAQlB,sBAAsB,EC9DtC,WAAA,EAAA,IAAA,EAAA,CAAA,EAAA,QAAA,EAAA,EAAA,EAAA,QAAA,EAAA,8+BAmCA,sFDGI,KAAK,EAAA,QAAA,EAAA,kBAAA,EAAA,MAAA,EAAA,CAAA,SAAA,EAAA,cAAA,EAAA,eAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EACL,IAAI,EAAA,QAAA,EAAA,QAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,UAAA,EAAA,UAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EACJ,mBAAmB,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,oBAAA,EAAA,QAAA,EAAA,8MAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,eAAA,EAAA,QAAA,EAAA,2CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,oBAAA,EAAA,QAAA,EAAA,eAAA,EAAA,MAAA,EAAA,CAAA,aAAA,EAAA,UAAA,EAAA,SAAA,CAAA,EAAA,OAAA,EAAA,CAAA,eAAA,CAAA,EAAA,QAAA,EAAA,CAAA,QAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EACnB,gBAAgB,EAChB,QAAA,EAAA,oBAAA,EAAA,MAAA,EAAA,CAAA,yBAAA,EAAA,kBAAA,EAAA,0BAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,YAAY,EACZ,QAAA,EAAA,gBAAA,EAAA,MAAA,EAAA,CAAA,oBAAA,EAAA,OAAA,EAAA,YAAA,EAAA,YAAA,EAAA,iBAAA,EAAA,WAAA,CAAA,EAAA,QAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,QAAQ,EACR,QAAA,EAAA,WAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,QAAQ,iUACR,sBAAsB,EAAA,QAAA,EAAA,mDAAA,EAAA,MAAA,EAAA,CAAA,iBAAA,EAAA,yBAAA,EAAA,4BAAA,EAAA,cAAA,EAAA,yBAAA,CAAA,EAAA,QAAA,EAAA,CAAA,wBAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EACtB,eAAe,EAAA,QAAA,EAAA,kBAAA,EAAA,MAAA,EAAA,CAAA,YAAA,EAAA,iBAAA,EAAA,aAAA,EAAA,uBAAA,EAAA,wBAAA,EAAA,kBAAA,EAAA,YAAA,EAAA,eAAA,EAAA,OAAA,EAAA,8BAAA,CAAA,EAAA,OAAA,EAAA,CAAA,gBAAA,EAAA,QAAA,EAAA,QAAA,EAAA,iBAAA,CAAA,EAAA,QAAA,EAAA,CAAA,iBAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EACf,SAAS,EAAA,QAAA,EAAA,YAAA,EAAA,MAAA,EAAA,CAAA,OAAA,EAAA,IAAA,EAAA,UAAA,CAAA,EAAA,OAAA,EAAA,CAAA,mBAAA,CAAA,EAAA,QAAA,EAAA,CAAA,WAAA,CAAA,EAAA,CAAA,EAAA,eAAA,EAAA,EAAA,CAAA,uBAAA,CAAA,MAAA,EAAA,CAAA,CAAA,EAAA;;2FAOA,qBAAqB,EAAA,UAAA,EAAA,CAAA;kBApBjC,SAAS;+BACE,kBAAkB,EAAA,UAAA,EAChB,IAAI,EACP,OAAA,EAAA;wBACP,KAAK;wBACL,IAAI;wBACJ,mBAAmB;wBACnB,gBAAgB;wBAChB,YAAY;wBACZ,QAAQ;wBACR,QAAQ;wBACR,sBAAsB;wBACtB,eAAe;wBACf,SAAS;wBACT,sBAAsB;qBACvB,EAGgB,eAAA,EAAA,uBAAuB,CAAC,MAAM,EAAA,QAAA,EAAA,8+BAAA,EAAA,MAAA,EAAA,CAAA,8BAAA,CAAA,EAAA,CAAA;wDAW/C,sBAAsB,EAAA,CAAA;sBADrB,YAAY;uBAAC,sBAAsB,CAAA;gBAG3B,SAAS,EAAA,CAAA;sBAAjB,KAAK;gBAEI,YAAY,EAAA,CAAA;sBAArB,MAAM;gBACG,cAAc,EAAA,CAAA;sBAAvB,MAAM;;;AEtDH,SAAU,WAAW,CAAC,GAAc,EAAA;IACxC,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC3C,CAAC;IAEW,cAKX;AALD,CAAA,UAAY,aAAa,EAAA;AACvB,IAAA,aAAA,CAAA,UAAA,CAAA,GAAA,UAAqB,CAAA;AACrB,IAAA,aAAA,CAAA,SAAA,CAAA,GAAA,SAAmB,CAAA;AACnB,IAAA,aAAA,CAAA,cAAA,CAAA,GAAA,OAAsB,CAAA;AACtB,IAAA,aAAA,CAAA,QAAA,CAAA,GAAA,aAAsB,CAAA;AACxB,CAAC,EALW,aAAa,KAAb,aAAa,GAKxB,EAAA,CAAA,CAAA,CAAA;AAEY,MAAA,eAAe,GAAqB;AAC/C,IAAA,QAAQ,EAAE,UAAU;AACpB,IAAA,OAAO,EAAE,iBAAiB;AAC1B,IAAA,KAAK,EAAE,sBAAsB;EAC7B;AAEc,SAAA,YAAY,CAAC,KAAgB,EAAE,KAAsB,EAAA;IACnE,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,IAAI,EAAE;QACpC,MAAM,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,OAAiB,CAAC,CAAC;AAEnD,QAAA,IAAI,OAAO,IAAI,IAAI,EAAE;YACnB,OAAO,CAAC,SAAS,CAAC,EAAE,WAAW,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;SACnD;KACF;AACH,CAAC;SAEe,uBAAuB,CACrC,QAAkB,EAClB,WAAgD,EAChD,IAAe,EAAA;IAEf,MAAM,CACJ,MAAK;AACH,QAAA,MAAM,KAAK,GAAG,WAAW,EAAE,CAAC;QAE5B,IAAI,KAAK,EAAE;AACT,YAAA,YAAY,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;SAC3B;KACF,EACD,EAAE,iBAAiB,EAAE,IAAI,EAAE,QAAQ,EAAE,CACtC,CAAC;AACJ;;MCnBa,kBAAkB,CAAA;AAb/B,IAAA,WAAA,GAAA;AAcmB,QAAA,IAAA,CAAA,SAAS,GAAa,MAAM,CAAC,QAAQ,CAAC,CAAC;AAExD,QAAA,IAAA,CAAA,OAAO,GAAG,KAAK,CAAC,QAAQ,EAA4C,CAAC;AACrE,QAAA,IAAA,CAAA,GAAG,GAAG,KAAK,CAAC,QAAQ,EAAU,CAAC;QAC/B,IAAI,CAAA,IAAA,GAAG,KAAK,EAAU,CAAC;QACvB,IAAK,CAAA,KAAA,GAAG,KAAK,EAAU,CAAC;QACxB,IAAI,CAAA,IAAA,GAAG,KAAK,EAAU,CAAC;QACvB,IAAS,CAAA,SAAA,GAAG,KAAK,EAAoB,CAAC;AAkEvC,KAAA;IA5DC,QAAQ,GAAA;AACN,QAAA,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,MAAM,IAAI,CAAC,OAAO,EAAiB,CAAC,CAAC;AACjE,QAAA,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;AAC5D,QAAA,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;KACrE;AAEO,IAAA,sBAAsB,CAAC,WAAwB,EAAA;AACrD,QAAA,OAAO,qBAAqB,CAAC,IAAI,CAAC,SAAS,EAAE,MAC3C,QAAQ,CAAC,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC,EAAE;AAC9C,YAAA,YAAY,EAAE,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC;AACjD,SAAA,CAAC,CACH,CAAC;KACH;AAEO,IAAA,mBAAmB,CAAC,WAAwB,EAAA;AAClD,QAAA,OAAO,WAAW,CAAC,aAAa,CAAC,IAAI,CACnC,GAAG,CAAC,MAAM,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,CAC9C,CAAC;KACH;AAEO,IAAA,kBAAkB,CAAC,WAAwB,EAAA;AACjD,QAAA,OAAO,qBAAqB,CAAC,IAAI,CAAC,SAAS,EAAE,MAC3C,QAAQ,CAAC,IAAI,CAAC,sBAAsB,CAAC,WAAW,CAAC,EAAE;AACjD,YAAA,YAAY,EAAE,KAAK;AACpB,SAAA,CAAC,CACH,CAAC;KACH;AAEO,IAAA,sBAAsB,CAC5B,WAAwB,EAAA;AAExB,QAAA,OAAO,WAAW,CAAC,aAAa,CAAC,IAAI,CACnC,SAAS,CAAC,WAAW,CAAC,MAAM,CAAC,EAC7B,GAAG,CAAC,MAAM,WAAW,CAAC,MAAM,CAAC,EAC7B,GAAG,CAAC,CAAC,MAA+B,KAAK,CAAC,CAAC,MAAM,CAAC,CACnD,CAAC;KACH;;AAGO,IAAA,gBAAgB,CAAC,OAAsC,EAAA;QAC7D,MAAM,MAAM,GAAG,EAAE,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;QAErC,IAAI,MAAM,EAAE;YACV,MAAM,SAAS,GAAa,MAAM,CAAC,IAAI,CAAC,MAAgB,CAAC,CAAC;AAE1D,YAAA,KAAK,MAAM,KAAK,IAAI,SAAS,EAAE;AAC7B,gBAAA,IAAI,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;AAC3B,oBAAA,MAAM,QAAQ,GAAG;AACf,wBAAA,GAAG,MAAM;AACT,wBAAA,GAAG,eAAe;wBAClB,GAAG,IAAI,CAAC,SAAS,EAAE;qBACpB,CAAC;AAEF,oBAAA,OAAO,QAAQ,CAAC,KAAK,CAAW,CAAC;iBAClC;aACF;SACF;AAED,QAAA,OAAO,EAAE,CAAC;KACX;8GAzEU,kBAAkB,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA,EAAA;kGAAlB,kBAAkB,EAAA,YAAA,EAAA,IAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,MAAA,EAAA,EAAA,OAAA,EAAA,EAAA,iBAAA,EAAA,SAAA,EAAA,UAAA,EAAA,SAAA,EAAA,QAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,iBAAA,EAAA,KAAA,EAAA,UAAA,EAAA,KAAA,EAAA,QAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,iBAAA,EAAA,MAAA,EAAA,UAAA,EAAA,MAAA,EAAA,QAAA,EAAA,IAAA,EAAA,UAAA,EAAA,KAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,EAAA,KAAA,EAAA,EAAA,iBAAA,EAAA,OAAA,EAAA,UAAA,EAAA,OAAA,EAAA,QAAA,EAAA,IAAA,EAAA,UAAA,EAAA,KAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,iBAAA,EAAA,MAAA,EAAA,UAAA,EAAA,MAAA,EAAA,QAAA,EAAA,IAAA,EAAA,UAAA,EAAA,KAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,EAAA,SAAA,EAAA,EAAA,iBAAA,EAAA,WAAA,EAAA,UAAA,EAAA,WAAA,EAAA,QAAA,EAAA,IAAA,EAAA,UAAA,EAAA,KAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,EAAA,EAAA,QAAA,EAAA,EAAA,EAAA,QAAA,ECrC/B,keAmBA,EDSI,MAAA,EAAA,CAAA,yHAAA,CAAA,EAAA,YAAA,EAAA,CAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EAAA,YAAY,8BACZ,mBAAmB,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,oBAAA,EAAA,QAAA,EAAA,8MAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,eAAA,EAAA,QAAA,EAAA,2CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,oBAAA,EAAA,QAAA,EAAA,eAAA,EAAA,MAAA,EAAA,CAAA,aAAA,EAAA,UAAA,EAAA,SAAA,CAAA,EAAA,OAAA,EAAA,CAAA,eAAA,CAAA,EAAA,QAAA,EAAA,CAAA,QAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EACnB,kBAAkB,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAAC,IAAA,CAAA,YAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,MAAA,EAAA,CAAA,oBAAA,EAAA,OAAA,EAAA,YAAA,EAAA,YAAA,EAAA,iBAAA,EAAA,WAAA,CAAA,EAAA,QAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAAA,IAAA,CAAA,QAAA,EAAA,QAAA,EAAA,WAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAAA,IAAA,CAAA,OAAA,EAAA,QAAA,EAAA,UAAA,EAAA,MAAA,EAAA,CAAA,OAAA,EAAA,IAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAAA,IAAA,CAAA,QAAA,EAAA,QAAA,EAAA,uBAAA,EAAA,MAAA,EAAA,CAAA,IAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,UAAA,EAAA,IAAA,EAClB,cAAc,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAAD,EAAA,CAAA,QAAA,EAAA,QAAA,EAAA,yHAAA,EAAA,MAAA,EAAA,CAAA,UAAA,EAAA,IAAA,EAAA,aAAA,EAAA,MAAA,EAAA,UAAA,EAAA,MAAA,EAAA,mBAAA,EAAA,kBAAA,EAAA,OAAA,EAAA,UAAA,CAAA,EAAA,QAAA,EAAA,CAAA,UAAA,CAAA,EAAA,CAAA,EAAA,eAAA,EAAA,EAAA,CAAA,uBAAA,CAAA,MAAA,EAAA,CAAA,CAAA,EAAA;;2FAML,kBAAkB,EAAA,UAAA,EAAA,CAAA;kBAb9B,SAAS;+BACE,gBAAgB,EAAA,UAAA,EACd,IAAI,EACP,OAAA,EAAA;wBACP,YAAY;wBACZ,mBAAmB;wBACnB,kBAAkB;wBAClB,cAAc;qBACf,EAGgB,eAAA,EAAA,uBAAuB,CAAC,MAAM,EAAA,QAAA,EAAA,keAAA,EAAA,MAAA,EAAA,CAAA,yHAAA,CAAA,EAAA,CAAA;;;AEJjD,SAAS,MAAM,CAAC,UAAkB,EAAA;AAChC,IAAA,OAAO,UAAU,IAAI,UAAU,GAAG,UAAU,GAAG,UAAU,GAAG,UAAU,CAAC;AACzE,CAAC;AAED;AACgB,SAAA,yBAAyB,CACvC,KAAc,EACd,UAAkB,EAAA;IAElB,OAAO,CAAC,GAAyB,KAAI;AACnC,QAAA,MAAM,GAAG,GAAW,MAAM,CAAC,UAAU,CAAC,CAAC;QACvC,MAAM,UAAU,GAAG,KAA8C,CAAC;QAClE,MAAM,WAAW,GAAG,UAAU,CAAC,GAAG,CAAC,EAAE,EAAE,MAAM,GAAG,CAAC,CAAC;QAClD,MAAM,MAAM,GAAG,WAAW,GAAG,cAAc,GAAG,WAAW,CAAC;AAE1D,QAAA,IAAI,GAAG,KAAK,UAAU,EAAE;YACtB,UAAU,CAAC,KAA4B,EAAE,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;SAC/D;aAAM;AACL,YAAA,UAAU,CACR,KAA4B,EAC5B,MAAM,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,UAAU,EAAE,CAAC,CACpC,CAAC;SACH;AACH,KAAC,CAAC;AACJ,CAAC;AAEe,SAAA,YAAY,CAC1B,MAA8C,EAC9C,UAAkB,EAAA;IAElB,OAAO,qBAAqB,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,MAAK;AAClD,QAAA,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;AAC9B,QAAA,OAAO,CAAC,KAAQ,KAAK,MAAM,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,CAAC;AACjD,KAAC,CAAC,CAAC;AACL,CAAC;AAEK,SAAU,YAAY,CAC1B,MAAsD,EACtD,KAA0B,EAC1B,UAAU,GAAG,UAAU,EAAA;AAEvB,IAAA,OAAO,QAAQ,CACb,IAAI,CACF,SAAS,CAAC,CAAC,KAAK,KACd,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAChB,WAAW,CAAC;AACV,QAAA,IAAI,EAAE,yBAAyB,CAAC,KAAK,EAAE,UAAU,CAAC;AAClD,QAAA,KAAK,EAAE,MAAM,KAAK;AACnB,KAAA,CAAC,CACH,CACF,CACF,CACF,CAAC;AACJ,CAAC;AAEe,SAAA,iBAAiB,CAC/B,MAA8C,EAC9C,UAAkB,EAAA;IAElB,OAAO,qBAAqB,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,MAAK;AAClD,QAAA,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;AAC9B,QAAA,OAAO,CAAC,KAAQ,KAAK,MAAM,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,CAAC;AACjD,KAAC,CAAC,CAAC;AACL,CAAC;SAEe,SAAS,CACvB,MAAsD,EACtD,KAA0B,EAC1B,KAAa,EAAA;AAEb,IAAA,OAAO,QAAQ,CACb,IAAI,CACF,SAAS,CAAC,CAAC,KAAK,KACd,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAChB,WAAW,CAAC;AACV,QAAA,IAAI,EAAE,CAAC,GAAG,KAAK,UAAU,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,GAAG,GAAG,CAAC,OAAO,EAAE,CAAC;AAC1D,QAAA,KAAK,EAAE,MAAM,KAAK;AACnB,KAAA,CAAC,CACH,CACF,CACF,CACF,CAAC;AACJ;;ACjHA,SAAS,WAAW,CAAC,GAAW,EAAA;AAC9B,IAAA,OAAO,GAAG;AACP,SAAA,KAAK,CAAC,GAAG,CAAC;SACV,GAAG,CACF,CAAC,IAAI,EAAE,KAAK,KACV,KAAK,KAAK,CAAC;AACT,UAAE,IAAI,CAAC,WAAW,EAAE;UAClB,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE;AACjE,KAAA;AACA,SAAA,IAAI,CAAC,EAAE,CAAC,CAAC;AACd,CAAC;AAEK,SAAU,UAAU,CAAC,KAAa,EAAA;AACtC,IAAA,MAAM,eAAe,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;IAC3C,OAAO,CAAA,IAAA,EAAO,eAAe,CAAA,CAAE,CAAC;AAClC;;ACfA;;ACAA;;AAEG;;;;"}