import { Injector, inject, runInInjectionContext } from '@angular/core';
import { tapResponse } from '@ngrx/operators';
import { patchState } from '@ngrx/signals';
import { addEntities, setAllEntities } from '@ngrx/signals/entities';
import { rxMethod } from '@ngrx/signals/rxjs-interop';
import { EMPTY, pipe, switchMap } from 'rxjs';
export function onLoadSlice(state, slice) {
    return (res) => patchState(state, { [slice]: res });
}
export function onLoadEntities(state) {
    return (res) => patchState(state, addEntities(res));
}
// Function to handle the success response of loading entities
export function onLoadCollection(state, collection) {
    return (res) => patchState(state, addEntities(res, { collection }));
}
// Function to handle the success response of loading entities
export function onUpdateCollection(state, collection) {
    return (res) => {
        patchState(state, setAllEntities(res, { collection }));
    };
}
/**
 * Creates a function that invokes a specified method on a LoaderService instance.
 * @param Loader The LoaderService instance.
 * @param methodName The name of the method to invoke on the LoaderService instance.
 * @returns A function that accepts parameters for the specified method and returns an Observable of the result.
 * @template T The type of parameters accepted by the method.
 */
export function createLoader(Loader, methodName) {
    return runInInjectionContext(inject(Injector), () => {
        const loader = inject(Loader);
        return (query) => loader[methodName](query);
    });
}
export function loadCollection(loader, next) {
    return rxMethod(pipe(switchMap((query) => loader(query).pipe(tapResponse({
        next: next,
        error: () => EMPTY,
    })))));
}
/**
 * Loads entities using the provided loader function and invokes the specified
 * callback with the result.
 * @param loader A function that accepts a query parameter of type T and returns
 *               an Observable of Entity or Entity[].
 * @param next A callback function to handle the result of the loading operation.
 * @template T The type of the query parameter.
 */
export function loadEntities(loader, next) {
    return rxMethod(pipe(switchMap((query) => loader(query).pipe(tapResponse({
        next: next,
        error: () => EMPTY,
    })))));
}
export function loadSlice(loader, state, slice) {
    return rxMethod(pipe(switchMap((query) => loader(query).pipe(tapResponse({
        next: (res) => patchState(state, { [slice]: res }),
        error: () => EMPTY,
    })))));
}
//# sourceMappingURL=data:application/json;base64,