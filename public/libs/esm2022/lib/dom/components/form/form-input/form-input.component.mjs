import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component, EventEmitter, Output, computed, inject, input, signal } from '@angular/core';
import { ReactiveFormsModule, } from '@angular/forms';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { FormErrorService } from '../form-error.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@angular/material/form-field";
import * as i3 from "@angular/material/input";
export class FormInputComponent {
    constructor() {
        this.#formError = inject(FormErrorService);
        this.control = input.required();
        this.key = input.required();
        this.type = input();
        this.label = input();
        this.hint = input();
        this.messagesMap = input();
        this.message = signal('');
        this.blurChanged = new EventEmitter();
    }
    #formError;
    ngOnInit() {
        this.formControl = computed(() => this.control());
        const errorEmitter = this.#formError.createErrorMessageEmitter(this.messagesMap(), (value) => this.message.set(value));
        this.#formError.handleError(this.formControl(), errorEmitter);
    }
    onBlur() {
        this.blurChanged.emit(this.formControl());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: FormInputComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.2", type: FormInputComponent, isStandalone: true, selector: "dom-form-input", inputs: { control: { classPropertyName: "control", publicName: "control", isSignal: true, isRequired: true, transformFunction: null }, key: { classPropertyName: "key", publicName: "key", isSignal: true, isRequired: true, transformFunction: null }, type: { classPropertyName: "type", publicName: "type", isSignal: true, isRequired: false, transformFunction: null }, label: { classPropertyName: "label", publicName: "label", isSignal: true, isRequired: false, transformFunction: null }, hint: { classPropertyName: "hint", publicName: "hint", isSignal: true, isRequired: false, transformFunction: null }, messagesMap: { classPropertyName: "messagesMap", publicName: "messagesMap", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { blurChanged: "blurChanged" }, ngImport: i0, template: "<mat-form-field class=\"full-width\">\n  <mat-label>{{ label() }}</mat-label>\n  <input\n    #input\n    matInput\n    autocomplete=\"off\"\n    [type]=\"type() || 'text'\"\n    [formControl]=\"formControl()\"\n    [name]=\"key()\"\n    (blur)=\"onBlur()\"\n  />\n\n  @if (hint()) {\n  <mat-hint> {{ 'Please enter your ' + hint() }}</mat-hint>\n\n  } @if (!!message()) {\n  <mat-error>{{ message() }}</mat-error>\n  }\n</mat-form-field>\n", styles: ["mat-form-field{width:100%;display:inline-block}input[type=number]::-webkit-inner-spin-button{-webkit-appearance:none}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "ngmodule", type: ReactiveFormsModule }, { kind: "directive", type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "ngmodule", type: MatFormFieldModule }, { kind: "component", type: i2.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i2.MatLabel, selector: "mat-label" }, { kind: "directive", type: i2.MatHint, selector: "mat-hint", inputs: ["align", "id"] }, { kind: "directive", type: i2.MatError, selector: "mat-error, [matError]", inputs: ["id"] }, { kind: "ngmodule", type: MatInputModule }, { kind: "directive", type: i3.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly"], exportAs: ["matInput"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: FormInputComponent, decorators: [{
            type: Component,
            args: [{ selector: 'dom-form-input', standalone: true, imports: [
                        CommonModule,
                        ReactiveFormsModule,
                        MatFormFieldModule,
                        MatInputModule,
                    ], changeDetection: ChangeDetectionStrategy.OnPush, template: "<mat-form-field class=\"full-width\">\n  <mat-label>{{ label() }}</mat-label>\n  <input\n    #input\n    matInput\n    autocomplete=\"off\"\n    [type]=\"type() || 'text'\"\n    [formControl]=\"formControl()\"\n    [name]=\"key()\"\n    (blur)=\"onBlur()\"\n  />\n\n  @if (hint()) {\n  <mat-hint> {{ 'Please enter your ' + hint() }}</mat-hint>\n\n  } @if (!!message()) {\n  <mat-error>{{ message() }}</mat-error>\n  }\n</mat-form-field>\n", styles: ["mat-form-field{width:100%;display:inline-block}input[type=number]::-webkit-inner-spin-button{-webkit-appearance:none}\n"] }]
        }], propDecorators: { blurChanged: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1pbnB1dC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL3NyYy9saWIvZG9tL2NvbXBvbmVudHMvZm9ybS9mb3JtLWlucHV0L2Zvcm0taW5wdXQuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9zcmMvbGliL2RvbS9jb21wb25lbnRzL2Zvcm0vZm9ybS1pbnB1dC9mb3JtLWlucHV0LmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxZQUFZLEVBRVosTUFBTSxFQUdOLFFBQVEsRUFDUixNQUFNLEVBQ04sS0FBSyxFQUNMLE1BQU0sRUFDUCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBR0wsbUJBQW1CLEdBRXBCLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEIsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDbEUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3pELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDOzs7OztBQWV6RCxNQUFNLE9BQU8sa0JBQWtCO0lBYi9CO1FBZUUsZUFBVSxHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBRXRDLFlBQU8sR0FBRyxLQUFLLENBQUMsUUFBUSxFQUE0QyxDQUFDO1FBQ3JFLFFBQUcsR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFVLENBQUM7UUFDL0IsU0FBSSxHQUFHLEtBQUssRUFBVSxDQUFDO1FBQ3ZCLFVBQUssR0FBRyxLQUFLLEVBQVUsQ0FBQztRQUN4QixTQUFJLEdBQUcsS0FBSyxFQUFVLENBQUM7UUFDdkIsZ0JBQVcsR0FBRyxLQUFLLEVBQW9CLENBQUM7UUFJeEMsWUFBTyxHQUEyQixNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFbkMsZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBZSxDQUFDO0tBZ0J6RDtJQTdCQyxVQUFVLENBQTRCO0lBZXRDLFFBQVE7UUFDTixJQUFJLENBQUMsV0FBVyxHQUFHLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFpQixDQUFDLENBQUM7UUFFakUsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyx5QkFBeUIsQ0FDNUQsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUNsQixDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQ25DLENBQUM7UUFFRixJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVELE1BQU07UUFDSixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztJQUM1QyxDQUFDOzhHQTlCVSxrQkFBa0I7a0dBQWxCLGtCQUFrQix5MUJDckMvQix3YkFtQkEsZ0xEU0ksWUFBWSw4QkFDWixtQkFBbUIseWtCQUNuQixrQkFBa0IsK2RBQ2xCLGNBQWM7OzJGQU1MLGtCQUFrQjtrQkFiOUIsU0FBUzsrQkFDRSxnQkFBZ0IsY0FDZCxJQUFJLFdBQ1A7d0JBQ1AsWUFBWTt3QkFDWixtQkFBbUI7d0JBQ25CLGtCQUFrQjt3QkFDbEIsY0FBYztxQkFDZixtQkFHZ0IsdUJBQXVCLENBQUMsTUFBTTs4QkFpQnJDLFdBQVc7c0JBQXBCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENvbXBvbmVudCxcbiAgRXZlbnRFbWl0dGVyLFxuICBPbkluaXQsXG4gIE91dHB1dCxcbiAgU2lnbmFsLFxuICBXcml0YWJsZVNpZ25hbCxcbiAgY29tcHV0ZWQsXG4gIGluamVjdCxcbiAgaW5wdXQsXG4gIHNpZ25hbFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIEFic3RyYWN0Q29udHJvbCxcbiAgRm9ybUNvbnRyb2wsXG4gIFJlYWN0aXZlRm9ybXNNb2R1bGUsXG4gIFZhbGlkYXRpb25FcnJvcnMsXG59IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IE1hdEZvcm1GaWVsZE1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2Zvcm0tZmllbGQnO1xuaW1wb3J0IHsgTWF0SW5wdXRNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9pbnB1dCc7XG5pbXBvcnQgeyBGb3JtRXJyb3JTZXJ2aWNlIH0gZnJvbSAnLi4vZm9ybS1lcnJvci5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZG9tLWZvcm0taW5wdXQnLFxuICBzdGFuZGFsb25lOiB0cnVlLFxuICBpbXBvcnRzOiBbXG4gICAgQ29tbW9uTW9kdWxlLFxuICAgIFJlYWN0aXZlRm9ybXNNb2R1bGUsXG4gICAgTWF0Rm9ybUZpZWxkTW9kdWxlLFxuICAgIE1hdElucHV0TW9kdWxlLFxuICBdLFxuICB0ZW1wbGF0ZVVybDogJy4vZm9ybS1pbnB1dC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2Zvcm0taW5wdXQuY29tcG9uZW50LnNjc3MnXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1JbnB1dENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgI2Zvcm1FcnJvciA9IGluamVjdChGb3JtRXJyb3JTZXJ2aWNlKTtcblxuICBjb250cm9sID0gaW5wdXQucmVxdWlyZWQ8QWJzdHJhY3RDb250cm9sPHVua25vd24sIHVua25vd24+IHwgbnVsbD4oKTtcbiAga2V5ID0gaW5wdXQucmVxdWlyZWQ8c3RyaW5nPigpO1xuICB0eXBlID0gaW5wdXQ8c3RyaW5nPigpO1xuICBsYWJlbCA9IGlucHV0PHN0cmluZz4oKTtcbiAgaGludCA9IGlucHV0PHN0cmluZz4oKTtcbiAgbWVzc2FnZXNNYXAgPSBpbnB1dDxWYWxpZGF0aW9uRXJyb3JzPigpO1xuXG4gIGZvcm1Db250cm9sITogU2lnbmFsPEZvcm1Db250cm9sPHVua25vd24+PjtcblxuICBtZXNzYWdlOiBXcml0YWJsZVNpZ25hbDxzdHJpbmc+ID0gc2lnbmFsKCcnKTtcblxuICBAT3V0cHV0KCkgYmx1ckNoYW5nZWQgPSBuZXcgRXZlbnRFbWl0dGVyPEZvcm1Db250cm9sPigpO1xuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMuZm9ybUNvbnRyb2wgPSBjb21wdXRlZCgoKSA9PiB0aGlzLmNvbnRyb2woKSBhcyBGb3JtQ29udHJvbCk7XG5cbiAgICBjb25zdCBlcnJvckVtaXR0ZXIgPSB0aGlzLiNmb3JtRXJyb3IuY3JlYXRlRXJyb3JNZXNzYWdlRW1pdHRlcihcbiAgICAgIHRoaXMubWVzc2FnZXNNYXAoKSxcbiAgICAgICh2YWx1ZSkgPT4gdGhpcy5tZXNzYWdlLnNldCh2YWx1ZSlcbiAgICApO1xuXG4gICAgdGhpcy4jZm9ybUVycm9yLmhhbmRsZUVycm9yKHRoaXMuZm9ybUNvbnRyb2woKSwgZXJyb3JFbWl0dGVyKTtcbiAgfVxuXG4gIG9uQmx1cigpIHtcbiAgICB0aGlzLmJsdXJDaGFuZ2VkLmVtaXQodGhpcy5mb3JtQ29udHJvbCgpKTtcbiAgfVxufVxuIiwiPG1hdC1mb3JtLWZpZWxkIGNsYXNzPVwiZnVsbC13aWR0aFwiPlxuICA8bWF0LWxhYmVsPnt7IGxhYmVsKCkgfX08L21hdC1sYWJlbD5cbiAgPGlucHV0XG4gICAgI2lucHV0XG4gICAgbWF0SW5wdXRcbiAgICBhdXRvY29tcGxldGU9XCJvZmZcIlxuICAgIFt0eXBlXT1cInR5cGUoKSB8fCAndGV4dCdcIlxuICAgIFtmb3JtQ29udHJvbF09XCJmb3JtQ29udHJvbCgpXCJcbiAgICBbbmFtZV09XCJrZXkoKVwiXG4gICAgKGJsdXIpPVwib25CbHVyKClcIlxuICAvPlxuXG4gIEBpZiAoaGludCgpKSB7XG4gIDxtYXQtaGludD4ge3sgJ1BsZWFzZSBlbnRlciB5b3VyICcgKyBoaW50KCkgfX08L21hdC1oaW50PlxuXG4gIH0gQGlmICghIW1lc3NhZ2UoKSkge1xuICA8bWF0LWVycm9yPnt7IG1lc3NhZ2UoKSB9fTwvbWF0LWVycm9yPlxuICB9XG48L21hdC1mb3JtLWZpZWxkPlxuIl19