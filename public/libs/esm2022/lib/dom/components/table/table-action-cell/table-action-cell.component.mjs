import { ChangeDetectionStrategy, Component, computed, input, output } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatButtonModule, MatIconButton } from '@angular/material/button';
import { MatIcon } from '@angular/material/icon';
import { MatTooltip } from '@angular/material/tooltip';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/button";
// export interface ButtonActionState {
//   editState?: ActionState;
//   deleteState?: ActionState;
// }
export class TableActionCellComponent {
    constructor() {
        this.icon = input('');
        this.tooltip = input('');
        this.text = input('');
        this.isDisabled = input(false);
        this.actionClicked = output();
    }
    ngOnInit() {
        this.isIconButton = computed(() => !!this.icon());
    }
    onActionButtonClick() {
        this.actionClicked.emit();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.1", ngImport: i0, type: TableActionCellComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.1.1", type: TableActionCellComponent, isStandalone: true, selector: "dom-table-actions-cell", inputs: { icon: { classPropertyName: "icon", publicName: "icon", isSignal: true, isRequired: false, transformFunction: null }, tooltip: { classPropertyName: "tooltip", publicName: "tooltip", isSignal: true, isRequired: false, transformFunction: null }, text: { classPropertyName: "text", publicName: "text", isSignal: true, isRequired: false, transformFunction: null }, isDisabled: { classPropertyName: "isDisabled", publicName: "isDisabled", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { actionClicked: "actionClicked" }, ngImport: i0, template: "@if (isIconButton()) {\r\n\r\n<button\r\n  mat-icon-button\r\n  type=\"button\"\r\n  (click)=\"onActionButtonClick()\"\r\n  [disabled]=\"isDisabled()\"\r\n  [matTooltip]=\"tooltip()\"\r\n>\r\n  <mat-icon [fontIcon]=\"icon()\"></mat-icon>\r\n</button>\r\n\r\n} @else {\r\n  <button\r\n    mat-flat-button\r\n    color=\"\"\r\n    type=\"button\"\r\n    (click)=\"onActionButtonClick()\"\r\n    [disabled]=\"isDisabled()\"\r\n    [matTooltip]=\"tooltip()\"\r\n  >\r\n    {{ text() }}\r\n  </button>\r\n}\r\n<!-- slots buttons -->\r\n<!-- <ng-container>\r\n    <ng-template\r\n      *ngTemplateOutlet=\"\r\n        endSlot;\r\n        context: {\r\n          $implicit: rowState\r\n        }\r\n      \"\r\n    ></ng-template>\r\n  </ng-container> -->\r\n", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "ngmodule", type: MatButtonModule }, { kind: "component", type: i1.MatButton, selector: "    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  ", exportAs: ["matButton"] }, { kind: "component", type: i1.MatIconButton, selector: "button[mat-icon-button]", exportAs: ["matButton"] }, { kind: "directive", type: MatTooltip, selector: "[matTooltip]", inputs: ["matTooltipPosition", "matTooltipPositionAtOrigin", "matTooltipDisabled", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipTouchGestures", "matTooltip", "matTooltipClass"], exportAs: ["matTooltip"] }, { kind: "component", type: MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "ngmodule", type: MatSlideToggleModule }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.1", ngImport: i0, type: TableActionCellComponent, decorators: [{
            type: Component,
            args: [{ selector: 'dom-table-actions-cell', standalone: true, imports: [
                        CommonModule,
                        MatButtonModule,
                        MatIconButton,
                        MatTooltip,
                        MatIcon,
                        MatSlideToggleModule,
                    ], changeDetection: ChangeDetectionStrategy.OnPush, template: "@if (isIconButton()) {\r\n\r\n<button\r\n  mat-icon-button\r\n  type=\"button\"\r\n  (click)=\"onActionButtonClick()\"\r\n  [disabled]=\"isDisabled()\"\r\n  [matTooltip]=\"tooltip()\"\r\n>\r\n  <mat-icon [fontIcon]=\"icon()\"></mat-icon>\r\n</button>\r\n\r\n} @else {\r\n  <button\r\n    mat-flat-button\r\n    color=\"\"\r\n    type=\"button\"\r\n    (click)=\"onActionButtonClick()\"\r\n    [disabled]=\"isDisabled()\"\r\n    [matTooltip]=\"tooltip()\"\r\n  >\r\n    {{ text() }}\r\n  </button>\r\n}\r\n<!-- slots buttons -->\r\n<!-- <ng-container>\r\n    <ng-template\r\n      *ngTemplateOutlet=\"\r\n        endSlot;\r\n        context: {\r\n          $implicit: rowState\r\n        }\r\n      \"\r\n    ></ng-template>\r\n  </ng-container> -->\r\n" }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtYWN0aW9uLWNlbGwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9zcmMvbGliL2RvbS9jb21wb25lbnRzL3RhYmxlL3RhYmxlLWFjdGlvbi1jZWxsL3RhYmxlLWFjdGlvbi1jZWxsLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvc3JjL2xpYi9kb20vY29tcG9uZW50cy90YWJsZS90YWJsZS1hY3Rpb24tY2VsbC90YWJsZS1hY3Rpb24tY2VsbC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFHVCxRQUFRLEVBQ1IsS0FBSyxFQUNMLE1BQU0sRUFDUCxNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxhQUFhLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUMxRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDakQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRXZELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDOzs7QUFFdEUsdUNBQXVDO0FBQ3ZDLDZCQUE2QjtBQUM3QiwrQkFBK0I7QUFDL0IsSUFBSTtBQWlCSixNQUFNLE9BQU8sd0JBQXdCO0lBZnJDO1FBZ0JFLFNBQUksR0FBRyxLQUFLLENBQVMsRUFBRSxDQUFDLENBQUM7UUFDekIsWUFBTyxHQUFHLEtBQUssQ0FBUyxFQUFFLENBQUMsQ0FBQztRQUM1QixTQUFJLEdBQUcsS0FBSyxDQUFTLEVBQUUsQ0FBQyxDQUFDO1FBRXpCLGVBQVUsR0FBRyxLQUFLLENBQVUsS0FBSyxDQUFDLENBQUM7UUFJbkMsa0JBQWEsR0FBRyxNQUFNLEVBQVEsQ0FBQztLQVNoQztJQVBDLFFBQVE7UUFDTixJQUFJLENBQUMsWUFBWSxHQUFHLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVELG1CQUFtQjtRQUNqQixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzVCLENBQUM7OEdBakJVLHdCQUF3QjtrR0FBeEIsd0JBQXdCLDBuQkNyQ3JDLGt2QkFtQ0EseUREVEksWUFBWSw4QkFDWixlQUFlLHlVQUVmLFVBQVUsaVJBQ1YsT0FBTywwSUFDUCxvQkFBb0I7OzJGQU1YLHdCQUF3QjtrQkFmcEMsU0FBUzsrQkFDRSx3QkFBd0IsY0FDdEIsSUFBSSxXQUNQO3dCQUNQLFlBQVk7d0JBQ1osZUFBZTt3QkFDZixhQUFhO3dCQUNiLFVBQVU7d0JBQ1YsT0FBTzt3QkFDUCxvQkFBb0I7cUJBQ3JCLG1CQUdnQix1QkFBdUIsQ0FBQyxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcclxuICBDb21wb25lbnQsXHJcbiAgT25Jbml0LFxyXG4gIFNpZ25hbCxcclxuICBjb21wdXRlZCxcclxuICBpbnB1dCxcclxuICBvdXRwdXRcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IE1hdEJ1dHRvbk1vZHVsZSwgTWF0SWNvbkJ1dHRvbiB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2J1dHRvbic7XHJcbmltcG9ydCB7IE1hdEljb24gfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9pY29uJztcclxuaW1wb3J0IHsgTWF0VG9vbHRpcCB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3Rvb2x0aXAnO1xyXG5cclxuaW1wb3J0IHsgTWF0U2xpZGVUb2dnbGVNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9zbGlkZS10b2dnbGUnO1xyXG5cclxuLy8gZXhwb3J0IGludGVyZmFjZSBCdXR0b25BY3Rpb25TdGF0ZSB7XHJcbi8vICAgZWRpdFN0YXRlPzogQWN0aW9uU3RhdGU7XHJcbi8vICAgZGVsZXRlU3RhdGU/OiBBY3Rpb25TdGF0ZTtcclxuLy8gfVxyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdkb20tdGFibGUtYWN0aW9ucy1jZWxsJyxcclxuICBzdGFuZGFsb25lOiB0cnVlLFxyXG4gIGltcG9ydHM6IFtcclxuICAgIENvbW1vbk1vZHVsZSxcclxuICAgIE1hdEJ1dHRvbk1vZHVsZSxcclxuICAgIE1hdEljb25CdXR0b24sXHJcbiAgICBNYXRUb29sdGlwLFxyXG4gICAgTWF0SWNvbixcclxuICAgIE1hdFNsaWRlVG9nZ2xlTW9kdWxlLFxyXG4gIF0sXHJcbiAgdGVtcGxhdGVVcmw6ICcuL3RhYmxlLWFjdGlvbi1jZWxsLmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi90YWJsZS1hY3Rpb24tY2VsbC5jb21wb25lbnQuc2NzcyddLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgVGFibGVBY3Rpb25DZWxsQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICBpY29uID0gaW5wdXQ8c3RyaW5nPignJyk7XHJcbiAgdG9vbHRpcCA9IGlucHV0PHN0cmluZz4oJycpO1xyXG4gIHRleHQgPSBpbnB1dDxzdHJpbmc+KCcnKTtcclxuXHJcbiAgaXNEaXNhYmxlZCA9IGlucHV0PGJvb2xlYW4+KGZhbHNlKTtcclxuXHJcbiAgaXNJY29uQnV0dG9uITogU2lnbmFsPGJvb2xlYW4+O1xyXG5cclxuICBhY3Rpb25DbGlja2VkID0gb3V0cHV0PHZvaWQ+KCk7XHJcblxyXG4gIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5pc0ljb25CdXR0b24gPSBjb21wdXRlZCgoKSA9PiAhIXRoaXMuaWNvbigpKTtcclxuICB9XHJcblxyXG4gIG9uQWN0aW9uQnV0dG9uQ2xpY2soKTogdm9pZCB7XHJcbiAgICB0aGlzLmFjdGlvbkNsaWNrZWQuZW1pdCgpO1xyXG4gIH1cclxufVxyXG4iLCJAaWYgKGlzSWNvbkJ1dHRvbigpKSB7XHJcblxyXG48YnV0dG9uXHJcbiAgbWF0LWljb24tYnV0dG9uXHJcbiAgdHlwZT1cImJ1dHRvblwiXHJcbiAgKGNsaWNrKT1cIm9uQWN0aW9uQnV0dG9uQ2xpY2soKVwiXHJcbiAgW2Rpc2FibGVkXT1cImlzRGlzYWJsZWQoKVwiXHJcbiAgW21hdFRvb2x0aXBdPVwidG9vbHRpcCgpXCJcclxuPlxyXG4gIDxtYXQtaWNvbiBbZm9udEljb25dPVwiaWNvbigpXCI+PC9tYXQtaWNvbj5cclxuPC9idXR0b24+XHJcblxyXG59IEBlbHNlIHtcclxuICA8YnV0dG9uXHJcbiAgICBtYXQtZmxhdC1idXR0b25cclxuICAgIGNvbG9yPVwiXCJcclxuICAgIHR5cGU9XCJidXR0b25cIlxyXG4gICAgKGNsaWNrKT1cIm9uQWN0aW9uQnV0dG9uQ2xpY2soKVwiXHJcbiAgICBbZGlzYWJsZWRdPVwiaXNEaXNhYmxlZCgpXCJcclxuICAgIFttYXRUb29sdGlwXT1cInRvb2x0aXAoKVwiXHJcbiAgPlxyXG4gICAge3sgdGV4dCgpIH19XHJcbiAgPC9idXR0b24+XHJcbn1cclxuPCEtLSBzbG90cyBidXR0b25zIC0tPlxyXG48IS0tIDxuZy1jb250YWluZXI+XHJcbiAgICA8bmctdGVtcGxhdGVcclxuICAgICAgKm5nVGVtcGxhdGVPdXRsZXQ9XCJcclxuICAgICAgICBlbmRTbG90O1xyXG4gICAgICAgIGNvbnRleHQ6IHtcclxuICAgICAgICAgICRpbXBsaWNpdDogcm93U3RhdGVcclxuICAgICAgICB9XHJcbiAgICAgIFwiXHJcbiAgICA+PC9uZy10ZW1wbGF0ZT5cclxuICA8L25nLWNvbnRhaW5lcj4gLS0+XHJcbiJdfQ==