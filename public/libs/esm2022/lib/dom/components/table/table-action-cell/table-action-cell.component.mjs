import { ChangeDetectionStrategy, Component, EventEmitter, Output, computed, input } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatButtonModule, MatIconButton } from '@angular/material/button';
import { MatIcon } from '@angular/material/icon';
import { MatTooltip } from '@angular/material/tooltip';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/button";
// export interface ButtonActionState {
//   editState?: ActionState;
//   deleteState?: ActionState;
// }
export class TableActionCellComponent {
    constructor() {
        this.icon = input('');
        this.tooltip = input('');
        this.text = input('');
        this.isDisabled = input(false);
        this.actionClicked = new EventEmitter();
    }
    ngOnInit() {
        this.isIconButton = computed(() => !!this.icon());
    }
    onActionButtonClick() {
        this.actionClicked.emit();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: TableActionCellComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.2", type: TableActionCellComponent, isStandalone: true, selector: "dom-table-actions-cell", inputs: { icon: { classPropertyName: "icon", publicName: "icon", isSignal: true, isRequired: false, transformFunction: null }, tooltip: { classPropertyName: "tooltip", publicName: "tooltip", isSignal: true, isRequired: false, transformFunction: null }, text: { classPropertyName: "text", publicName: "text", isSignal: true, isRequired: false, transformFunction: null }, isDisabled: { classPropertyName: "isDisabled", publicName: "isDisabled", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { actionClicked: "actionClicked" }, ngImport: i0, template: "@if (isIconButton()) {\r\n\r\n<button\r\n  mat-icon-button\r\n  type=\"button\"\r\n  (click)=\"onActionButtonClick()\"\r\n  [disabled]=\"isDisabled()\"\r\n  [matTooltip]=\"tooltip()\"\r\n>\r\n  <mat-icon [fontIcon]=\"icon()\"></mat-icon>\r\n</button>\r\n} @else {\r\n<button\r\n  mat-flat-button\r\n  type=\"button\"\r\n  (click)=\"onActionButtonClick()\"\r\n  [disabled]=\"isDisabled()\"\r\n  [matTooltip]=\"tooltip()\"\r\n>\r\n  {{ text() }}\r\n</button>\r\n}\r\n<!-- slots buttons -->\r\n<!-- <ng-container>\r\n    <ng-template\r\n      *ngTemplateOutlet=\"\r\n        endSlot;\r\n        context: {\r\n          $implicit: rowState\r\n        }\r\n      \"\r\n    ></ng-template>\r\n  </ng-container> -->\r\n", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "ngmodule", type: MatButtonModule }, { kind: "component", type: i1.MatButton, selector: "    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  ", exportAs: ["matButton"] }, { kind: "component", type: i1.MatIconButton, selector: "button[mat-icon-button]", exportAs: ["matButton"] }, { kind: "directive", type: MatTooltip, selector: "[matTooltip]", inputs: ["matTooltipPosition", "matTooltipPositionAtOrigin", "matTooltipDisabled", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipTouchGestures", "matTooltip", "matTooltipClass"], exportAs: ["matTooltip"] }, { kind: "component", type: MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: TableActionCellComponent, decorators: [{
            type: Component,
            args: [{ selector: 'dom-table-actions-cell', standalone: true, imports: [CommonModule, MatButtonModule, MatIconButton, MatTooltip, MatIcon], changeDetection: ChangeDetectionStrategy.OnPush, template: "@if (isIconButton()) {\r\n\r\n<button\r\n  mat-icon-button\r\n  type=\"button\"\r\n  (click)=\"onActionButtonClick()\"\r\n  [disabled]=\"isDisabled()\"\r\n  [matTooltip]=\"tooltip()\"\r\n>\r\n  <mat-icon [fontIcon]=\"icon()\"></mat-icon>\r\n</button>\r\n} @else {\r\n<button\r\n  mat-flat-button\r\n  type=\"button\"\r\n  (click)=\"onActionButtonClick()\"\r\n  [disabled]=\"isDisabled()\"\r\n  [matTooltip]=\"tooltip()\"\r\n>\r\n  {{ text() }}\r\n</button>\r\n}\r\n<!-- slots buttons -->\r\n<!-- <ng-container>\r\n    <ng-template\r\n      *ngTemplateOutlet=\"\r\n        endSlot;\r\n        context: {\r\n          $implicit: rowState\r\n        }\r\n      \"\r\n    ></ng-template>\r\n  </ng-container> -->\r\n" }]
        }], propDecorators: { actionClicked: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtYWN0aW9uLWNlbGwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9zcmMvbGliL2RvbS9jb21wb25lbnRzL3RhYmxlL3RhYmxlLWFjdGlvbi1jZWxsL3RhYmxlLWFjdGlvbi1jZWxsLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvc3JjL2xpYi9kb20vY29tcG9uZW50cy90YWJsZS90YWJsZS1hY3Rpb24tY2VsbC90YWJsZS1hY3Rpb24tY2VsbC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxZQUFZLEVBRVosTUFBTSxFQUVOLFFBQVEsRUFDUixLQUFLLEVBQ04sTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxlQUFlLEVBQUUsYUFBYSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDMUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ2pELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQzs7O0FBRXZELHVDQUF1QztBQUN2Qyw2QkFBNkI7QUFDN0IsK0JBQStCO0FBQy9CLElBQUk7QUFVSixNQUFNLE9BQU8sd0JBQXdCO0lBUnJDO1FBVUUsU0FBSSxHQUFHLEtBQUssQ0FBUyxFQUFFLENBQUMsQ0FBQztRQUN6QixZQUFPLEdBQUcsS0FBSyxDQUFTLEVBQUUsQ0FBQyxDQUFDO1FBQzVCLFNBQUksR0FBRyxLQUFLLENBQVMsRUFBRSxDQUFDLENBQUM7UUFFekIsZUFBVSxHQUFHLEtBQUssQ0FBVSxLQUFLLENBQUMsQ0FBQztRQUl6QixrQkFBYSxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7S0FTcEQ7SUFQQyxRQUFRO1FBQ04sSUFBSSxDQUFDLFlBQVksR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFRCxtQkFBbUI7UUFDakIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUM1QixDQUFDOzhHQWxCVSx3QkFBd0I7a0dBQXhCLHdCQUF3QiwwbkJDN0JyQywwc0JBaUNBLHlERFRZLFlBQVksOEJBQUUsZUFBZSx5VUFBaUIsVUFBVSxpUkFBRSxPQUFPOzsyRkFLaEUsd0JBQXdCO2tCQVJwQyxTQUFTOytCQUNFLHdCQUF3QixjQUN0QixJQUFJLFdBQ1AsQ0FBQyxZQUFZLEVBQUUsZUFBZSxFQUFFLGFBQWEsRUFBRSxVQUFVLEVBQUUsT0FBTyxDQUFDLG1CQUczRCx1QkFBdUIsQ0FBQyxNQUFNOzhCQVlyQyxhQUFhO3NCQUF0QixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcclxuICBDb21wb25lbnQsXHJcbiAgRXZlbnRFbWl0dGVyLFxyXG4gIE9uSW5pdCxcclxuICBPdXRwdXQsXHJcbiAgU2lnbmFsLFxyXG4gIGNvbXB1dGVkLFxyXG4gIGlucHV0XHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBNYXRCdXR0b25Nb2R1bGUsIE1hdEljb25CdXR0b24gfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9idXR0b24nO1xyXG5pbXBvcnQgeyBNYXRJY29uIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvaWNvbic7XHJcbmltcG9ydCB7IE1hdFRvb2x0aXAgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC90b29sdGlwJztcclxuXHJcbi8vIGV4cG9ydCBpbnRlcmZhY2UgQnV0dG9uQWN0aW9uU3RhdGUge1xyXG4vLyAgIGVkaXRTdGF0ZT86IEFjdGlvblN0YXRlO1xyXG4vLyAgIGRlbGV0ZVN0YXRlPzogQWN0aW9uU3RhdGU7XHJcbi8vIH1cclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnZG9tLXRhYmxlLWFjdGlvbnMtY2VsbCcsXHJcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcclxuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlLCBNYXRCdXR0b25Nb2R1bGUsIE1hdEljb25CdXR0b24sIE1hdFRvb2x0aXAsIE1hdEljb25dLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi90YWJsZS1hY3Rpb24tY2VsbC5jb21wb25lbnQuaHRtbCcsXHJcbiAgc3R5bGVVcmxzOiBbJy4vdGFibGUtYWN0aW9uLWNlbGwuY29tcG9uZW50LnNjc3MnXSxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxufSlcclxuZXhwb3J0IGNsYXNzIFRhYmxlQWN0aW9uQ2VsbENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gIGljb24gPSBpbnB1dDxzdHJpbmc+KCcnKTtcclxuICB0b29sdGlwID0gaW5wdXQ8c3RyaW5nPignJyk7XHJcbiAgdGV4dCA9IGlucHV0PHN0cmluZz4oJycpO1xyXG5cclxuICBpc0Rpc2FibGVkID0gaW5wdXQ8Ym9vbGVhbj4oZmFsc2UpO1xyXG5cclxuICBpc0ljb25CdXR0b24hOiBTaWduYWw8Ym9vbGVhbj47XHJcblxyXG4gIEBPdXRwdXQoKSBhY3Rpb25DbGlja2VkID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xyXG5cclxuICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgIHRoaXMuaXNJY29uQnV0dG9uID0gY29tcHV0ZWQoKCkgPT4gISF0aGlzLmljb24oKSk7XHJcbiAgfVxyXG5cclxuICBvbkFjdGlvbkJ1dHRvbkNsaWNrKCk6IHZvaWQge1xyXG4gICAgdGhpcy5hY3Rpb25DbGlja2VkLmVtaXQoKTtcclxuICB9XHJcbn1cclxuIiwiQGlmIChpc0ljb25CdXR0b24oKSkge1xyXG5cclxuPGJ1dHRvblxyXG4gIG1hdC1pY29uLWJ1dHRvblxyXG4gIHR5cGU9XCJidXR0b25cIlxyXG4gIChjbGljayk9XCJvbkFjdGlvbkJ1dHRvbkNsaWNrKClcIlxyXG4gIFtkaXNhYmxlZF09XCJpc0Rpc2FibGVkKClcIlxyXG4gIFttYXRUb29sdGlwXT1cInRvb2x0aXAoKVwiXHJcbj5cclxuICA8bWF0LWljb24gW2ZvbnRJY29uXT1cImljb24oKVwiPjwvbWF0LWljb24+XHJcbjwvYnV0dG9uPlxyXG59IEBlbHNlIHtcclxuPGJ1dHRvblxyXG4gIG1hdC1mbGF0LWJ1dHRvblxyXG4gIHR5cGU9XCJidXR0b25cIlxyXG4gIChjbGljayk9XCJvbkFjdGlvbkJ1dHRvbkNsaWNrKClcIlxyXG4gIFtkaXNhYmxlZF09XCJpc0Rpc2FibGVkKClcIlxyXG4gIFttYXRUb29sdGlwXT1cInRvb2x0aXAoKVwiXHJcbj5cclxuICB7eyB0ZXh0KCkgfX1cclxuPC9idXR0b24+XHJcbn1cclxuPCEtLSBzbG90cyBidXR0b25zIC0tPlxyXG48IS0tIDxuZy1jb250YWluZXI+XHJcbiAgICA8bmctdGVtcGxhdGVcclxuICAgICAgKm5nVGVtcGxhdGVPdXRsZXQ9XCJcclxuICAgICAgICBlbmRTbG90O1xyXG4gICAgICAgIGNvbnRleHQ6IHtcclxuICAgICAgICAgICRpbXBsaWNpdDogcm93U3RhdGVcclxuICAgICAgICB9XHJcbiAgICAgIFwiXHJcbiAgICA+PC9uZy10ZW1wbGF0ZT5cclxuICA8L25nLWNvbnRhaW5lcj4gLS0+XHJcbiJdfQ==