import { effect, signal, } from '@angular/core';
export function getFormKeys(obj) {
    return signal(Object.keys(obj.controls));
}
export var FormErrorType;
(function (FormErrorType) {
    FormErrorType["Required"] = "required";
    FormErrorType["Pattern"] = "pattern";
    FormErrorType["EmailPattern"] = "email";
    FormErrorType["Server"] = "serverError";
})(FormErrorType || (FormErrorType = {}));
export const errorMessageMap = {
    required: 'required',
    pattern: 'invalid pattern',
    email: 'invalid email format',
};
export function setFormError(group, error) {
    if (group !== null && error !== null) {
        const control = group.get(error.control);
        if (control != null) {
            control.setErrors({ serverError: error.message });
        }
    }
}
export function handleServerErrorEffect(injector, serverError, form) {
    effect(() => {
        const error = serverError();
        if (error) {
            setFormError(form, error);
        }
    }, { allowSignalWrites: true, injector });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS5oZWxwZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL3NyYy9saWIvZG9tL2NvbXBvbmVudHMvZm9ybS1pbnB1dC9mb3JtLmhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBSUwsTUFBTSxFQUNOLE1BQU0sR0FDUCxNQUFNLGVBQWUsQ0FBQztBQVF2QixNQUFNLFVBQVUsV0FBVyxDQUFDLEdBQWM7SUFDeEMsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUMzQyxDQUFDO0FBRUQsTUFBTSxDQUFOLElBQVksYUFLWDtBQUxELFdBQVksYUFBYTtJQUN2QixzQ0FBcUIsQ0FBQTtJQUNyQixvQ0FBbUIsQ0FBQTtJQUNuQix1Q0FBc0IsQ0FBQTtJQUN0Qix1Q0FBc0IsQ0FBQTtBQUN4QixDQUFDLEVBTFcsYUFBYSxLQUFiLGFBQWEsUUFLeEI7QUFFRCxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQXFCO0lBQy9DLFFBQVEsRUFBRSxVQUFVO0lBQ3BCLE9BQU8sRUFBRSxpQkFBaUI7SUFDMUIsS0FBSyxFQUFFLHNCQUFzQjtDQUM5QixDQUFDO0FBRUYsTUFBTSxVQUFVLFlBQVksQ0FBQyxLQUFnQixFQUFFLEtBQXNCO0lBQ25FLElBQUksS0FBSyxLQUFLLElBQUksSUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFLENBQUM7UUFDckMsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBaUIsQ0FBQyxDQUFDO1FBRW5ELElBQUksT0FBTyxJQUFJLElBQUksRUFBRSxDQUFDO1lBQ3BCLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRSxXQUFXLEVBQUUsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDcEQsQ0FBQztJQUNILENBQUM7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLHVCQUF1QixDQUNyQyxRQUFrQixFQUNsQixXQUFnRCxFQUNoRCxJQUFlO0lBRWYsTUFBTSxDQUNKLEdBQUcsRUFBRTtRQUNILE1BQU0sS0FBSyxHQUFHLFdBQVcsRUFBRSxDQUFDO1FBRTVCLElBQUksS0FBSyxFQUFFLENBQUM7WUFDVixZQUFZLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzVCLENBQUM7SUFDSCxDQUFDLEVBQ0QsRUFBRSxpQkFBaUIsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQ3RDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgSW5qZWN0b3IsXG4gIFNpZ25hbCxcbiAgV3JpdGFibGVTaWduYWwsXG4gIGVmZmVjdCxcbiAgc2lnbmFsLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1Hcm91cCwgVmFsaWRhdGlvbkVycm9ycyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuZXhwb3J0IGludGVyZmFjZSBGb3JtU2VydmVyRXJyb3Ige1xuICBjb250cm9sOiBzdHJpbmc7XG4gIG1lc3NhZ2U6IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEZvcm1LZXlzKG9iajogRm9ybUdyb3VwKTogV3JpdGFibGVTaWduYWw8c3RyaW5nW10+IHtcbiAgcmV0dXJuIHNpZ25hbChPYmplY3Qua2V5cyhvYmouY29udHJvbHMpKTtcbn1cblxuZXhwb3J0IGVudW0gRm9ybUVycm9yVHlwZSB7XG4gIFJlcXVpcmVkID0gJ3JlcXVpcmVkJyxcbiAgUGF0dGVybiA9ICdwYXR0ZXJuJyxcbiAgRW1haWxQYXR0ZXJuID0gJ2VtYWlsJyxcbiAgU2VydmVyID0gJ3NlcnZlckVycm9yJyxcbn1cblxuZXhwb3J0IGNvbnN0IGVycm9yTWVzc2FnZU1hcDogVmFsaWRhdGlvbkVycm9ycyA9IHtcbiAgcmVxdWlyZWQ6ICdyZXF1aXJlZCcsXG4gIHBhdHRlcm46ICdpbnZhbGlkIHBhdHRlcm4nLFxuICBlbWFpbDogJ2ludmFsaWQgZW1haWwgZm9ybWF0Jyxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRGb3JtRXJyb3IoZ3JvdXA6IEZvcm1Hcm91cCwgZXJyb3I6IEZvcm1TZXJ2ZXJFcnJvcik6IHZvaWQge1xuICBpZiAoZ3JvdXAgIT09IG51bGwgJiYgZXJyb3IgIT09IG51bGwpIHtcbiAgICBjb25zdCBjb250cm9sID0gZ3JvdXAuZ2V0KGVycm9yLmNvbnRyb2wgYXMgc3RyaW5nKTtcblxuICAgIGlmIChjb250cm9sICE9IG51bGwpIHtcbiAgICAgIGNvbnRyb2wuc2V0RXJyb3JzKHsgc2VydmVyRXJyb3I6IGVycm9yLm1lc3NhZ2UgfSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVTZXJ2ZXJFcnJvckVmZmVjdChcbiAgaW5qZWN0b3I6IEluamVjdG9yLFxuICBzZXJ2ZXJFcnJvcjogU2lnbmFsPEZvcm1TZXJ2ZXJFcnJvciB8IHVuZGVmaW5lZD4sXG4gIGZvcm06IEZvcm1Hcm91cFxuKTogdm9pZCB7XG4gIGVmZmVjdChcbiAgICAoKSA9PiB7XG4gICAgICBjb25zdCBlcnJvciA9IHNlcnZlckVycm9yKCk7XG5cbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBzZXRGb3JtRXJyb3IoZm9ybSwgZXJyb3IpO1xuICAgICAgfVxuICAgIH0sXG4gICAgeyBhbGxvd1NpZ25hbFdyaXRlczogdHJ1ZSwgaW5qZWN0b3IgfVxuICApO1xufVxuIl19